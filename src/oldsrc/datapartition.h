#ifndef DATAPARTITION#define DATAPARTITION#include <map>#include "models.h"#include "encodedchars.h"#include "settings.h"#include "packedencodeddata.h"class DataPartition	{	PackedEncodedData **packedData;//Num of models (mixed) for this partition x num taxa x numchars for this model	int nmodels,ntax;	Model **mods;	int *destination;	FreqParamGroup *modelMixingParam;	int packingTypes,packingIndex;		public :	bool dirty,partCrit;		DataPartition();	DataPartition(LikeSettings *, map<nxsstring,EncodedChars *>&,int);	DataPartition(ParsSettings *, map<nxsstring,EncodedChars *>&,int);	~DataPartition();	int GetNModels()	{return nmodels;}	int GetNChar(int i)	{assert(packedData && nmodels); return packedData[i]->GetNChar();}	Model *GetModel(int i)	{assert(mods && nmodels); return mods[i];}	int *GetIsConstant(int i)	{assert(packedData && nmodels); return packedData[i]->GetIsConstant();}	short *GetNReps(int i)	{assert(packedData && nmodels); return packedData[i]->GetNReps();}	short *GetConstChars(int i)	{assert(packedData && nmodels); return packedData[i]->GetConstChars();}	short *GetCharsInShorts(int i,nxsstring tn)	{assert(packedData && nmodels); return packedData[i]->GetCharsInShorts(tn);}	void AddModel(Model *m,int place);	void PackDataPartitions(DataSettings *DSettings,map<nxsstring,EncodedChars *>&rawData,int num);	FreqParamGroup *GetModelMixingParam()	{return modelMixingParam;}	int GetPackingType()	{return packingTypes;}	int GetPackingIndex()	{return packingIndex;}	int GetPlaceInPackedPartition(int prePackedNum);	int GetNumTaxWithState(short *st,int modnum,int charNum,bool equalsOnly=true)	{assert(packedData && nmodels); return packedData[modnum]->GetNumTaxWithState(st,charNum,equalsOnly);}};#endif
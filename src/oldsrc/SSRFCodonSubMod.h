#ifndef SSRFSUBMODCODON#define SSRFSUBMODCODON#define MINIMUMAAFREQABOVEZERO 1.0e-12#include "AdvancedBullDefs.h"#include "models.h"#include "CondenseMatrices.h"class SSRFCodonSubMod : public ModelWEig	{	double CalculateBeta(void);	FreqParamGroup *baseFreqs,*aaFreqs;	double **codFreqs,SSRkContrib,overflowMultiplier;	Parameter *sharedBrLenInterpreter;	void CalculateCodonFreqs();	//global codon code: AAA=0 ... TTT=63       global amino acid code A=0 ... Y=19 *=20	int *codonLocToGlob;//codonTrans[i] is the global codon code where i is the local codon code	int *aminoAcidLocToGlob;//aminoAcidTLocToGlob[i] is the global amino acid code where i is the local amino acid code	int codonGlobToLoc[64];//thisCodeByStd[i] is the local codon code where i is the global code	int *codLocToAminoAcidLoc;//translationToLocal[i] is the local amino acid code where i is the local codon code	// in the cpp file there is a global int MitotcodNum[i] that is the global amino acid code when i is the global codon code	int nPossAAs;	double **mutMat;public:	static bool mutParamsDirty;	static int geneticCode;static double defFreqA,defFreqC,defFreqG,defrAC,defrAG,defrAT,defrCG,defrCT,defrGT,	defA,defC,defD,defE,defF,defG,defH,defI,defK,defL,defM,defN,defP,defQ,defR,defS,defT,	defV,defW,defY,defStop,defRate;	int nCodonsInProtein;//total # of codons, in the models that share this mutational set of parameters#ifdef ALLOWMULTIHITS	enum params {blenMult=0 ,pMultHit,freqA , freqC , freqG , freqT , rAC , rAG , rAT , rCG , rCT , rGT ,fAAs};#else	enum params {blenMult=0 ,freqA , freqC , freqG , freqT , rAC , rAG , rAT , rCG , rCT , rGT ,fAAs};#endif	#ifdef ELIMINATEALLZEROS	int *maxcodonLocToGlob;	int *maxcodLocToAminoAcidLoc;	int *maxaminoAcidLocToGlob;	int origCodonGlobToLoc[64];		int maxNStates,maxNPossAAs;	Parameter **OrigParamArray;#endif				SSRFCodonSubMod(int ncods,int naas,bool *codP,bool *aaP,Parameter **gtrParams,FreqParamGroup *nucleoFreqs,double *ssrfParams,double *vecPreAlloc,int codnu,double **mm);	void 	SharedConstruction(bool *codP,bool *aaP, FreqParamGroup *nucleoFreqs,double *ssrfParams,int codnu);	~SSRFCodonSubMod();	inline void UpdatePmat(double b);	inline void UpdatePmat(double b,int onlycol);	inline void UpdatePmatWithOutSharedMatrix(double **pmats,double b);	inline void UpdatePmatWithOutSharedMatrix(double **pmats,double b,int onlycol);		void CalculateQ();		//void UpdatePMat(double);	//void UpdatePMatGamma(double);	void InitializeParameters();	FreqParamGroup *GetFreqParamGroup(int i);	static void set_default(double *allParams);	int GetEncodingType();	int GetNStates();	void RecalculateMutMatrix();	#ifdef CODONHACK			//AlertSharedMemory() is called because the EigInvEigMult matrix is shared, if the eigen vectors don't need to be recalculated		//(the mod parameter haven't changed) this will need to be called whenever the model being scored is changed called by Tree::PrepareLikeAttrAndAllNodes(int partnum,int modn)		void AlertSharedMemory();		double GetMultiplier();		void SetMultiplier(double x);		void AddAminoAcidFreqs(ofstream &dest);	#endif			void ParameterHasChanged(FreqParamGroup *p)	;	void ParameterHasChanged(Parameter *p);	void FreqParamChangesShouldSumToOne(FreqParamGroup *p);		#ifdef ELIMINATEALLZEROS		void ResizeModel();		int GetMaxNStates();		int *GetOrigLocToGlob();		int *GetCurrentGlobToLoc();		bool NeedToExpandPossibleAA();	#endif		double **GetStateFreqs();	//void PrintPAUPLsetCommand();	//void PrintBullLsettingsCommand();	int NumShortsPerCharacter();	int NumStatesInLastShort();	void EncodeACharacter(short *dest,short *inp,int datatype,bool keepGap=false) ;//written to allow odd coding of SSRFCodonSubModel which overrides};void SetCodeRelatedGlobals(int codeToUse);#ifdef CODONHACK	void CreateSetOfSSRFCodonSubMods(int nm,double *gtrp/* at least 8 doubles long */,double **setofSSRFparams/* full size=nm*21 */,SSRFCodonSubMod **arrayOfMods,double *multipliers,double treesc,int gcode);#else	void CreateSetOfSSRFCodonSubMods(int nm,double *gtrp/* at least 8 doubles long */,double **setofSSRFparams/* full size=nm*21 */,Model **arrayOfMods,double *multipliers,double treesc,int gcode);#endifbool IsBetweenNonZeroFreqAminoAcids(int index,double *ssrfParams);int GetNumberOfPossibleAminoAcids(bool *codOfObsAA,bool *possAAs);int GetNumberOfPossibleCodons(bool *possAAs);//bool CheckNotZero(double x);#endif
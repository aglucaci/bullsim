#ifndef _HKY#define _HKY#include "model.h"class HKY : public Model	{	double piAG,piCT,beta;	void CalculateBeta();	void CalculatePiSums();		static double defKappa, defFreqA , defFreqC, defFreqG;public:enum params {kappa=0 , freqA , freqC , freqG , freqT};	HKY();	HKY(double k,double a,double c, double g);	HKY(double k,double a,double c, double g, double pinv);	HKY(double k,double a,double c, double g, int ncats,double gammaAlpha);	HKY(double k,double a,double c, double g, double pinv,int ncats,double gammaAlpha);	~HKY();	void PrintPAUPLsetCommand();	void UpdatePMatrix(double **,double);	//void UpdatePmatGamma(double);	void InitializeParameters();	static void set_default(double k,double a, double c , double g)	{		defKappa=k;		defFreqA=a;		defFreqC=c;		defFreqG=g;		}	int GetEncodingType() {	return EncodingType(DNANoGap);}	int GetNStates()	{return 4;}	void ParameterHasChanged(Parameter *p)	{if(p==gammashape)	CalculateRates();											else if(p==param[HKY::kappa])														CalculateBeta();											else if(stateFreqs->IsAMember(p))													{CalculatePiSums();													CalculateBeta();													}											}	void ParameterHasChanged(FreqParamGroup *p)	{if(stateFreqs==p)													{CalculatePiSums();													CalculateBeta();													}												}		double CalculateTiTvRate();};#endif
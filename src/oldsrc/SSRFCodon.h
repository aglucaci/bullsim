#ifndef SSRFCODON#define SSRFCODON#include "models.h"//vertebrate mitochondrial onlyclass SSRFCodon : public ModelWEig	{	double CalculateBeta(void);	FreqParamGroup *baseFreqs,*aaFreqs;	double **codFreqs,SSRkContrib;	Parameter *sharedBrLenInterpreter;	void CalculateCodonFreqs();public:static double defFreqA,defFreqC,defFreqG,defrAC,defrAG,defrAT,defrCG,defrCT,defrGT,	defA,defC,defD,defE,defF,defG,defH,defI,defK,defL,defM,defN,defP,defQ,defR,defS,defT,	defV,defW,defY,defStop,defRate;	int nCodonsInProtein;//total # of codons, in the models that share this mutational set of parametersenum params {blenMult=0 ,freqA , freqC , freqG , freqT , rAC , rAG , rAT , rCG , rCT , rGT , 			fA , fC , fD, fE, fF, fG, fH, fI, fK, fL, fM , fN , fP , fQ , fR , fS , fT ,			fV , fW , fY , fStop };	SSRFCodon(Parameter * gtrParams,FreqParamGroup *nucleoFreqs,double *ssrfParams,double **vecPreAlloc/*size 4*/,double ***matPreAlloc/*size 3*/,complex ***complexPreAlloc/*size 2*/,double ***pMat,int codnu);	SSRFCodon(Parameter **gtrParams,FreqParamGroup *nucleoFreqs,double *ssrfParams,double *vecPreAlloc,int codnu);	void 	SharedConstruction(FreqParamGroup *nucleoFreqs,double *ssrfParams,int codnu);	~SSRFCodon();	inline void UpdatePmat(double b)	{		ModelWEig::UpdatePMatrix(*pMatrix,param[SSRFCodon::blenMult]->val*b);		}		inline void UpdatePmat(double b,int onlycol)	{		ModelWEig::UpdatePMatrix(*pMatrix,param[SSRFCodon::blenMult]->val*b,onlycol);		}	void CalculateQ();		//void UpdatePMat(double);	//void UpdatePMatGamma(double);	void InitializeParameters();	FreqParamGroup *GetFreqParamGroup(int i) 		{assert(i<nfreqParamGroups); 		if(i)	return aaFreqs;		return baseFreqs;		}	static void set_default(double *allParams);	int GetEncodingType() {	return EncodingType(MitoCodons);}	int GetNStates()	{return 64;}	double **GetStateFreqs()	{return codFreqs;}	//void PrintPAUPLsetCommand();	//void PrintBullLsettingsCommand();};void CreateSetOfSSRFCodons(int nm,double *gtrp/* at least 8 doubles long */,double **setofSSRFparams/* full size=nm*21 */,Model **arrayOfMods);//bool CheckNotZero(double x);#endif
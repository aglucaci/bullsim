#include "JC.h"JC::JC()	: Model(4){	nparams=0;	nfreeparams=0;	nfreqParamGroups=0;	double f[4]={.25,.25,.25,.25};	stateFreqs=new FreqParamGroup(4,f,par(CUR)|par(FIX));	beta=4.0/3.0;}JC::JC(double pinv)	: Model(4,pinv){	nparams=0;	nfreeparams=0;	nfreqParamGroups=0;	double f[4]={.25,.25,.25,.25};	stateFreqs=new FreqParamGroup(4,f,par(CUR)|par(FIX));	beta=4.0/3.0;}JC::JC(int ncats,double gammaAlpha)	: Model(4,ncats,gammaAlpha){	nparams=0;	nfreeparams=0;	nfreqParamGroups=0;	double f[4]={.25,.25,.25,.25};	stateFreqs=new FreqParamGroup(4,f,par(CUR)|par(FIX));	beta=4.0/3.0;}JC::JC(double pinv,int ncats,double gammaAlpha)	: Model(4,pinv,ncats,gammaAlpha){	nparams=0;	nfreeparams=0;	nfreqParamGroups=0;	double f[4]={.25,.25,.25,.25};	stateFreqs=new FreqParamGroup(4,f,par(CUR)|par(FIX));	beta=4.0/3.0;}void JC::UpdatePMatrix(double **pmats,double blen){	double emut=exp(-blen*beta);	double same=.25+.75*emut;	double diff=.25-.25*emut;	double *temp;	temp=*pmats;	*temp++=same;	//AA	*temp++=diff;									//AC	*temp++=diff;	//AG	*temp++=diff;										//AT		*temp++=diff;									//CA	*temp++=same;	//CC	*temp++=diff;										//CG	*temp++=diff;	//CT		*temp++=diff;	//GA	*temp++=diff;										//GC	*temp++=same;	//GG	*temp++=diff;										//GT		*temp++=diff;									//TA	*temp++=diff;	//TC	*temp++=diff;										//TG	*temp=same;		//TT}/*void JC::UpdatePmatGamma(double blen){		double *temp;	temp=**pmats;	for(int i=0;i<ngamcat;i++)	{double emut=exp(-blen*beta**(rates+i));	double same=.25+.75*emut;	double diff=.25-.25*emut;	*temp++=same;	//AA	*temp++=diff;									//AC	*temp++=diff;	//AG	*temp++=diff;										//AT		*temp++=diff;									//CA	*temp++=same;	//CC	*temp++=diff;										//CG	*temp++=diff;	//CT		*temp++=diff;	//GA	*temp++=diff;										//GC	*temp++=same;	//GG	*temp++=diff;										//GT		*temp++=diff;									//TA	*temp++=diff;	//TC	*temp++=diff;										//TG	*temp++=same;		//TT	}}*/void JC::InitializeParameters(){	}
#ifndef _F81#define _F81#include "model.h"class F81 : public Model	{	double beta;	void CalculateBeta();		static double  defFreqA , defFreqC, defFreqG;public:enum params {freqA , freqC , freqG , freqT};	F81();	F81(double a,double c, double g);	F81(double a,double c, double g, double pinv);	F81(double a,double c, double g, int ncats,double gammaAlpha);	F81(double a,double c, double g, double pinv,int ncats,double gammaAlpha);	~F81();	void UpdatePMatrix(double **,double);	//void UpdatePmatGamma(double);	void InitializeParameters();	static void set_default(double a, double c , double g)	{		defFreqA=a;		defFreqC=c;		defFreqG=g;		}	int GetEncodingType() {	return EncodingType(DNANoGap);}	int GetNStates()	{return 4;}	void ParameterHasChanged(Parameter *p)	{if(p==gammashape)	CalculateRates();											else if(stateFreqs->IsAMember(p))													CalculateBeta();											}	void ParameterHasChanged(FreqParamGroup *p)	{if(p==stateFreqs)	CalculateBeta(); }};#endif
#ifndef JHLINALG#define JHLINALG/*	linalg.h||	Prototypes for matrix-inversion and eigensystem functions||	Copyright (c) 1998 by David L. Swofford, Smithsonian Institution.|	All rights reserved.||	NOTE: if ANSI function prototypes are not supported, define NO_PROTOTYPES|		  before including this file.*/#include "complex.h"#include "matrices.h"#define RC_COMPLEX_EVAL 2	/* code that complex eigenvalue obtained */extern int  InvertMatrix (double **a, int n, double *col, int *indx, double **a_inv);extern int  LUDecompose (double **a, int n, double *vv, int *indx, double *pd);extern int  EigenRealGeneral (int n, double **a, double *v, double *vi, double **u, int *iwork, double *work);int GetEigens (int n, double **qMatrix, double *eigenValues, double *eigvalsImag, double **eigvecs, double **inverseEigvecs, complex **Ceigvecs, complex **CinverseEigvecs);//int ChangeMatrix (double t, double r, double **p, int n, double *eigenValues, double **eigvecs, double **inverseEigvecs);//int ChangeMatrix (double t, double r, double **p, int n, double *eigenValues, double **eigvecs, double **inverseEigvecs);//int ChangeMatrix (double rt, double **p, int n, double *eigenValues, double **eigvecs, double **inverseEigvecs);void ChangeMatrixWithOutSharedMatrix(double rt, double *p, int n, double *eigenValues, double **eigvecs, double **inverseEigvecs,double *gexp);void ChangeVectorWithOutSharedMatrix(double rt, double *p, int n, double *eigenValues, double **eigvecs, double **inverseEigvecs,double *gexp,int onlycol);int ComplexChangeMatrix (int n, double **p, double rt, double *eigenValues, double *eigvalsImag, complex **Ceigvecs, complex **CinverseEigvecs);#include "CondenseMatrices.h"	#ifdef CONDENSEMATRICES		void ChangeMatrix (double rt, double *p, int n, double *eigenValues,  double *EigInvMult, double *gexp);		void ChangeMatrix (double rt, double *p, int n, double *eigenValues,  double *EigInvMult, double *gexp,int nonzero,double *preCalced);		void ChangeVector (double rt, double *p, int n, double *eigenValues,  double *EigInvMult, double *gexp,int onlycol);		void ChangeVector (double rt, double *p, int n, double *eigenValues,  double *EigInvMult, double *gexp,int nonzero,double *preCalced,int onlycol);		void CalculateAndCondenseEigInvEigMult(double *eigvecs, double **inverseEigvecs,int n,double *EigInvMult);		void CalculateEigInvEigMultAndPreSum(double *eigvecs, double **inverseEigvecs,int n,double *EigInvMult,double *PreSum,int nlast);	#else		void ChangeMatrix (double rt, double *p, int n, double *eigenValues,  double *EigInvMult, double *gexp);		void ChangeMatrix (double rt, double *p, int n, double *eigenValues,  double *EigInvMult, double *gexp,int nonzero,double *preCalced);		void ChangeVector (double rt, double *p, int n, double *eigenValues,  double *EigInvMult, double *gexp,int onlycol);		void ChangeVector (double rt, double *p, int n, double *eigenValues,  double *EigInvMult, double *gexp,int nonzero,double *preCalced,int onlycol);		void CalculateGlobalEigInvEigMult(double *eigvecs, double **inverseEigvecs,int n,double *EigInvMult);		void CalculateReorderedEigInvEigMult(double *eigvecs, double **inverseEigvecs,int n,double *EigInvMult);		void DoPreSummation(double *EigInvMult,double *PreSum,int nlast,int n);	#endif#endif
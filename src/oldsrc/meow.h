#ifndef __BULLCMDLINE_H#define __BULLCMDLINE_H#include <list>#include <map>#include <algorithm>#include <strstream>#include <fstream.h>#include <iomanip.h>#include <unistd.h>#include <stdio.h>#include "mynexus.h"#include "encodedchars.h"#include "basicfuncs.h"#include "ourtree.h"#include "models.h"#include "likesettings.h"#include "datapartition.h"#include "parameteralterationinfo.h"#define COMMAND_MAXLEN  255class NoSuchTree : public MTHException { public :	NoSuchTree() : MTHException() {}	NoSuchTree(const char *c) :MTHException(c) { }	};class NoModel : public MTHException { public :	NoModel() : MTHException() {}	NoModel(const char *c) :MTHException(c) { }	};class Bull :  public NexusBlock, public Nexus{   // Adding a new data member? Don't forget to:   // 1. Describe it in the class header comment at the top of "emptyblock.cpp"   // 2. Initialize it (unless it is self-initializing) in the constructor   //    and reinitialize it in the Reset function   // 3. Describe the initial state in the constructor documentation   // 4. Delete memory allocated to it in both the destructor and Reset function   // 5. Report it in some way in the Report functionprotected:	bool inf_open , logf_open , quit_now , purged;		ofstream logf;		nxsstring message;	char next_command[COMMAND_MAXLEN+1];		TreesBlock* trees;	TaxaBlock* taxa;	AssumptionsBlock* assumptions;	CharactersBlock* charordata, *characters;	DataBlock *data;		LikeSettings *LSettings;	ParameterAlterationInfo *paramAlterInfo;		int ntrees , ntaxa , nchars,npartitions;	vector<Tree *> treelist;	map<nxsstring, EncodedChars *> rawData;	DataPartition **partitions;	Model *curmodel;	Node **RecursiveNodeList;	protected:	int CharLabelToNumber( nxsstring s );	bool FileExists( const char* fn );	nxsstring GetFileName( NexusToken& token );	void FactoryDefaults();    void HandleEndblock( NexusToken& token );	void HandleLog( NexusToken& token );	void HandleExecute( NexusToken& token );	void HandleLscore(NexusToken& token );	void HandleLset(NexusToken& token );	void PurgeBlocks();	void Read( NexusToken& token );	void Reset();	int TaxonLabelToNumber( nxsstring s );	void CreateDataMap();	void FinishCharactersBlock();	void FinishTaxaBlock();	void FinishTreesBlock();	Tree *FindTreeFromName(nxsstring);		double LScore(Tree *);	void GetTreeReadyToCalcLike(Tree *);	bool NeedToPartition();	void Partition();	void CreateParameterAlterationInfo();	SetOfLikeAttr *CreateSetOfLikeAttrForANode(void);//creates Set for Internal Nodes	SetOfLikeAttr *CreateSetOfLikeAttrForANode(nxsstring termName);//creates set for terminals	TreeSetOfLikeAttr *CreateSetOfLikeAttrForATree(void);	void InstantiateBranchLengths(Tree *t);	void InstantiateBranchLengthModifiers(Tree *t);	void SetBrlensToNULLIfNotOwner(Tree *t);	void InitializeParameters();	public:	Bull();   ~Bull();	void ExecuteStarting() {}	void ExecuteStopping() {}	void OutputComment( nxsstring s ) {			cout << endl;			cout << s << endl;			logf << endl;			logf << s << endl;		}	void ExitingBlock( nxsstring blockName ) {			cout << "Finished with \"" << blockName << "\" block." << endl;			logf << "Finished with \"" << blockName << "\" block." << endl;		}	void EnteringBlock( nxsstring blockName );	void HandleNextCommand();	void NexusError( nxsstring& msg, streampos pos, long line, long col );	void PreprocessNextCommand();	void PrintMessage( bool linefeed = true );	void Report( ostream& out );	void Run();	void SkippingBlock( nxsstring blockName );	void SkippingCommand( nxsstring commandName );	bool UserSaysOk( nxsstring mb_message, nxsstring mb_title );	};#endif
#ifndef PARAMETER#define PARAMETER#include "basicbulldefs.h"#include "nxsstring.h"#include "MTHException.h"class ParamExcep :public MTHException {public: ParamExcep(const char *p) : MTHException(p) {}											   ParamExcep(nxsstring n, const char *p) : MTHException(n,p) {}};class ParamOutOfRangeExcep :public MTHException {public: ParamOutOfRangeExcep(const char *p) : MTHException(p) {}											   ParamOutOfRangeExcep(nxsstring n, const char *p) : MTHException(n,p) {}											   ParamOutOfRangeExcep() : MTHException() {}};//DEF, CUR , RAN , APPRO and APPRO2 are starting conditions, make sure that ALLSTART is their union if adding another starting poingenum par {MIN=1 , MAX=2 , DEF=4 , CUR=8 , RAN=16 , APPRO = 32 , FIX =64 , UBOUN=128 , LBOUN=256, CONSTR=512 , APPRO2 = 1024 , ALLSTART = 1084, CONSTR2 =2048};class Parameter {	protected :	double defaultv;	int setting;	public:	double val;	Parameter();	Parameter(double v,int st,double def);	Parameter(double v,int st);	Parameter(double v);	virtual int HasMin()	{return false;}	virtual void SetMin(double m)	{throw ParamExcep("Calling inappropriate base function of Parameter");m=1;}	virtual int HasMax()	{return false;}	virtual void SetMax(double m)	{throw ParamExcep("Calling inappropriate base function of Parameter");m=1;}	int StartWithDefault();	virtual void SetToDefault();	virtual void SetDefault(double m);	virtual void SetStartWithDefault(bool i);	int StartWithCurrent()	;	virtual void SetCurrent(double m)	{val=m;}	virtual void SetStartWithCurrent(bool i);		int StartWithRandom()	;	virtual void SetStartWithRandom(bool i)	;	int StartWithApproximation()	;	virtual void SetStartWithApproximation(bool i);	int Fixed()	;	virtual void SetFixed(double m)	;	void SetFixed(bool i)	;	virtual int HasUpperBound()				{return false;}	virtual void SetUpperBound(double m)	{throw ParamExcep("Calling inappropriate base function of Parameter");m=1;}	virtual void SetUpperBound(bool i)		{throw ParamExcep("Calling inappropriate base function of Parameter");i=false;}	virtual int HasLowerBound()				{return false;}	virtual void SetLowerBound(double m)	{throw ParamExcep("Calling inappropriate base function of Parameter");m=1;}	virtual void SetLowerBound(bool i)		{throw ParamExcep("Calling inappropriate base function of Parameter");i=false;}	virtual bool Constrained()				{return false;}	virtual void SetConstrained(bool i)		{throw ParamExcep("Calling inappropriate base function of Parameter");i=false;}	int GetSetting()	{return setting;}	virtual double GetLowerOfMaxOrUbound()	{throw ParamExcep("Calling inappropriate base function of Parameter");}	virtual double GetHigherOfMinOrLbound()	{throw ParamExcep("Calling inappropriate base function of Parameter");}	virtual nxsstring GetName()	{nxsstring c; return c;}};class BoundedParameter: public Parameter	{		protected :	double maxv,minv,upbound,lowbound;		public:	BoundedParameter();	BoundedParameter(double v,double mn,double mx, int st,double def);		virtual int HasMin();	virtual void SetMin(double m);	int HasMax();		void SetMax(double m);	int HasUpperBound();					void SetUpperBound(double m)	;	void SetUpperBound(bool i)		;	int HasLowerBound()				;	void SetLowerBound(double m)	;	void SetLowerBound(bool i)		;	bool Constrained()				;	void SetConstrained(bool i)		;	void SetCurrent(double v);	void SetDefault(double m);	double GetLowerOfMaxOrUbound()	;	 	double GetHigherOfMinOrLbound()	;};class PositiveParameter:public BoundedParameter	{	public :	PositiveParameter();	PositiveParameter(double v);	PositiveParameter(double v,int st,double def);	PositiveParameter(double v,int st);	virtual int HasMin()	{return true;}	virtual void SetMin(double m)	{throw ParamExcep("Calling inappropriate base function of PositiveParameter");m=1;}	};	class NonNegativeParameter:public BoundedParameter	{	public :	NonNegativeParameter();	NonNegativeParameter(double v);	NonNegativeParameter(double v,int st,double def);	NonNegativeParameter(double v,int st);	virtual int HasMin()	{return true;}	virtual void SetMin(double m)	{throw ParamExcep("Calling inappropriate base function of NonNegativeParameter");m=1;}	};	class FullParameter: public BoundedParameter	{	nxsstring name;		public :	FullParameter(double v,double mn,double mx, int st,double def,nxsstring n);	nxsstring GetName() {return name;}};class FreqParamGroup	{	double sum;	Parameter **param;	int nparams;	double **statefreqs;	bool owns;	public :	FreqParamGroup(int n,double *l,int settings);	FreqParamGroup(int n,Parameter **p);	~FreqParamGroup();	double **GetStateFreqs();	Parameter *GetParameter(int i);	void Initialize();	int GetNParams()	{return nparams;}	bool IsAMember(Parameter *inp);	int Fixed();	int GetSetting();		double GetReparameterized(int n);	void SetReparameterized(int n,double v);	double GetReparameterizedMax(int n);	double GetReparameterizedMin(int n);	void SetToMinimum(Parameter *d);	void ForceToSumToOne(double minnonzero);};#endif
#ifndef _GTR#define _GTR#include "model.h"class GTR : public ModelWEig	{	double beta;	void CalculateBeta(void);	static double defFreqA,defFreqC,defFreqG,defrAC,defrAG,defrAT,defrCG,defrCT,defrGT;	//FreqParamGroup *baseFreqs;public:enum params {freqA=0 , freqC , freqG , freqT , rAC , rAG , rAT , rCG , rCT , rGT };	GTR();	GTR(double a,double c, double g , double ac ,double ag , double at , double cg , double ct);	GTR(double a,double c, double g , double ac ,double ag , double at , double cg , double ct , double pinv);	GTR(double a,double c, double g , double ac ,double ag , double at , double cg , double ct , double pinv,int ncats,double gammaAlpha);	GTR(double a,double c, double g , double ac ,double ag , double at , double cg , double ct , int ncats,double gammaAlpha);	~GTR();	void CalculateQ();	//void UpdatePMat(double);	//void UpdatePMatGamma(double);	void InitializeParameters();	static void set_default(double a,double c, double g , double ac ,double ag , double at , double cg , double ct , double gt)	{		defFreqA=a;		defFreqC=c;		defFreqG=g;		defrAC=ac;		defrAG=ag;		defrAT=at;		defrCG=cg;		defrCT=ct;		defrGT=gt;		}	int GetEncodingType() {	return EncodingType(DNANoGap);}	int GetNStates()	{return 4;}	void PrintPAUPLsetCommand();	void PrintBullLsettingsCommand();};#endif
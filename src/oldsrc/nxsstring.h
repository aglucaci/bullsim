#ifndef __NXSSTRING_H#define __NXSSTRING_H#include <vector>#include <string>using namespace std;#include <stdio.h>#include <assert.h>#include <cctype>class nxsstring : public std::string{   public:      nxsstring() {}      nxsstring( const char* s ) {         assign(s);      }      nxsstring(char c) {      	char s[2];      	 s[0] = c;      	 s[1] = '\0';      	 assign(s);         }      nxsstring( const nxsstring& s ) {         assign(s);      }      nxsstring& operator=( const char* s ) {         assign(s);         return *this;      }      nxsstring& operator=( const nxsstring& s ) {         assign(s);         return *this;      }      nxsstring& operator+=( const nxsstring& s ) {         append(s);         return *this;      }      nxsstring& operator+=( const char c ) {      	 char s[2];      	 s[0] = c;      	 s[1] = '\0';         append(s);         return *this;      }      nxsstring& operator+=( const int i ) {         char tmp[81];         sprintf( tmp, "%d", i );         append(tmp);         return *this;      }      nxsstring& operator+=( const long l ) {         char tmp[81];         sprintf( tmp, "%d", l );         append(tmp);         return *this;      }      nxsstring& operator+=( const double d );            void ShortenTo( int n );};nxsstring GetTreeToken(nxsstring fullstr,nxsstring::iterator &c);char GetNextGraphicalNonCommentedChar(nxsstring fullstr,nxsstring::iterator &c);char GetNextNonCommentedChar(nxsstring fullstr,nxsstring::iterator &c);nxsstring& BlanksToUnderscores( nxsstring& s );nxsstring& UnderscoresToBlanks( nxsstring& s );void ToUpper(nxsstring&);#endif
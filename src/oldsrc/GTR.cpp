#include "GTR.h"double GTR::defFreqA(.25);double GTR::defFreqC(.25);double GTR::defFreqG(.25);double GTR::defrAC(1);double GTR::defrAG(2);double GTR::defrAT(1);double GTR::defrCG(1);double GTR::defrCT(2);double GTR::defrGT(1);GTR::GTR()	: ModelWEig(4){	nfreqParamGroups=1;	nparams=10;	nfreeparams=8;	param=new Parameter *[nparams];	param[GTR::freqA]=new FullParameter(defFreqA,SMALLDOUBLE,1.0-SMALLDOUBLE,par(MIN)|par(MAX)|par(DEF),defFreqA,"freqA");	param[GTR::freqC]=new FullParameter(defFreqC,SMALLDOUBLE,1.0-SMALLDOUBLE,par(MIN)|par(MAX)|par(DEF),defFreqC,"freqC");	param[GTR::freqG]=new FullParameter(defFreqG,SMALLDOUBLE,1.0-SMALLDOUBLE,par(MIN)|par(MAX)|par(DEF),defFreqG,"freqG");	param[GTR::freqT]=new FullParameter(1.0-defFreqA-defFreqC-defFreqG,SMALLDOUBLE,1.0-SMALLDOUBLE,par(MIN)|par(MAX)|par(DEF),1.0-defFreqA-defFreqC-defFreqG,"freqT");	param[GTR::rAC]=new PositiveParameter(defrAC,par(MIN)|par(DEF),defrAC);	param[GTR::rAG]=new PositiveParameter(defrAG,par(MIN)|par(DEF),defrAG);	param[GTR::rAT]=new PositiveParameter(defrAT,par(MIN)|par(DEF),defrAT);	param[GTR::rCG]=new PositiveParameter(defrCG,par(MIN)|par(DEF),defrCG);	param[GTR::rCT]=new PositiveParameter(defrCT,par(MIN)|par(DEF),defrCT);	param[GTR::rGT]=new PositiveParameter(defrGT,par(MIN)|par(DEF),defrGT);	stateFreqs=new FreqParamGroup(4,(param+GTR::freqA));	CalculateBeta();}GTR::GTR(double a,double c, double g , double ac ,double ag , double at , double cg , double ct , double pinv)	: ModelWEig(4,pinv){	nparams=10;	nfreeparams=8;	nfreqParamGroups=1;	param=new Parameter *[nparams];	param[GTR::freqA]=new FullParameter(a,SMALLDOUBLE,1.0-SMALLDOUBLE,par(MIN)|par(MAX)|par(CUR),defFreqA,"freqA");	param[GTR::freqC]=new FullParameter(c,SMALLDOUBLE,1.0-SMALLDOUBLE,par(MIN)|par(MAX)|par(CUR),defFreqC,"freqC");	param[GTR::freqG]=new FullParameter(g,SMALLDOUBLE,1.0-SMALLDOUBLE,par(MIN)|par(MAX)|par(CUR),defFreqG,"freqG");	param[GTR::freqT]=new FullParameter(1.0-a-c-g,SMALLDOUBLE,1.0-SMALLDOUBLE,par(MIN)|par(MAX)|par(CUR),1.0-defFreqA-defFreqC-defFreqG,"freqT");	param[GTR::rAC]=new PositiveParameter(ac,par(MIN)|par(CUR),defrAC);	param[GTR::rAG]=new PositiveParameter(ag,par(MIN)|par(CUR),defrAG);	param[GTR::rAT]=new PositiveParameter(at,par(MIN)|par(CUR),defrAT);	param[GTR::rCG]=new PositiveParameter(cg,par(MIN)|par(CUR),defrCG);	param[GTR::rCT]=new PositiveParameter(ct,par(MIN)|par(CUR),defrCT);	param[GTR::rGT]=new PositiveParameter(1.0,par(MIN)|par(CUR),defrGT);	stateFreqs=new FreqParamGroup(4,(param+GTR::freqA));	CalculateBeta();}	GTR::GTR(double a,double c, double g , double ac ,double ag , double at , double cg , double ct , double pinv,int ncats,double gammaAlpha)	: ModelWEig(4,pinv,ncats,gammaAlpha){	nparams=10;	nfreeparams=8;	nfreqParamGroups=1;	param=new Parameter *[nparams];	param[GTR::freqA]=new FullParameter(a,SMALLDOUBLE,1.0-SMALLDOUBLE,par(MIN)|par(MAX)|par(CUR),defFreqA,"freqA");	param[GTR::freqC]=new FullParameter(c,SMALLDOUBLE,1.0-SMALLDOUBLE,par(MIN)|par(MAX)|par(CUR),defFreqC,"freqC");	param[GTR::freqG]=new FullParameter(g,SMALLDOUBLE,1.0-SMALLDOUBLE,par(MIN)|par(MAX)|par(CUR),defFreqG,"freqG");	param[GTR::freqT]=new FullParameter(1.0-a-c-g,SMALLDOUBLE,1.0-SMALLDOUBLE,par(MIN)|par(MAX)|par(CUR),1.0-defFreqA-defFreqC-defFreqG,"freqT");	param[GTR::rAC]=new PositiveParameter(ac,par(MIN)|par(CUR),defrAC);	param[GTR::rAG]=new PositiveParameter(ag,par(MIN)|par(CUR),defrAG);	param[GTR::rAT]=new PositiveParameter(at,par(MIN)|par(CUR),defrAT);	param[GTR::rCG]=new PositiveParameter(cg,par(MIN)|par(CUR),defrCG);	param[GTR::rCT]=new PositiveParameter(ct,par(MIN)|par(CUR),defrCT);	param[GTR::rGT]=new PositiveParameter(1.0,par(MIN)|par(CUR),defrGT);	stateFreqs=new FreqParamGroup(4,(param+GTR::freqA));	CalculateBeta();}		GTR::GTR(double a,double c, double g , double ac ,double ag , double at , double cg , double ct ,int ncats,double gammaAlpha)	: ModelWEig(4,ncats,gammaAlpha){	nparams=10;	nfreeparams=8;	nfreqParamGroups=1;	param=new Parameter *[nparams];	param[GTR::freqA]=new FullParameter(a,SMALLDOUBLE,1.0-SMALLDOUBLE,par(MIN)|par(MAX)|par(CUR),defFreqA,"freqA");	param[GTR::freqC]=new FullParameter(c,SMALLDOUBLE,1.0-SMALLDOUBLE,par(MIN)|par(MAX)|par(CUR),defFreqC,"freqC");	param[GTR::freqG]=new FullParameter(g,SMALLDOUBLE,1.0-SMALLDOUBLE,par(MIN)|par(MAX)|par(CUR),defFreqG,"freqG");	param[GTR::freqT]=new FullParameter(1.0-a-c-g,SMALLDOUBLE,1.0-SMALLDOUBLE,par(MIN)|par(MAX)|par(CUR),1.0-defFreqA-defFreqC-defFreqG,"freqT");	param[GTR::rAC]=new PositiveParameter(ac,par(MIN)|par(CUR),defrAC);	param[GTR::rAG]=new PositiveParameter(ag,par(MIN)|par(CUR),defrAG);	param[GTR::rAT]=new PositiveParameter(at,par(MIN)|par(CUR),defrAT);	param[GTR::rCG]=new PositiveParameter(cg,par(MIN)|par(CUR),defrCG);	param[GTR::rCT]=new PositiveParameter(ct,par(MIN)|par(CUR),defrCT);	param[GTR::rGT]=new PositiveParameter(1.0,par(MIN)|par(CUR),defrGT);	stateFreqs=new FreqParamGroup(4,(param+GTR::freqA));	CalculateBeta();}		GTR::GTR(double a,double c, double g , double ac ,double ag , double at , double cg , double ct)	: ModelWEig(4){	nparams=10;	nfreeparams=8;	nfreqParamGroups=1;	param=new Parameter *[nparams];	param[GTR::freqA]=new FullParameter(a,SMALLDOUBLE,1.0-SMALLDOUBLE,par(MIN)|par(MAX)|par(CUR),defFreqA,"freqA");	param[GTR::freqC]=new FullParameter(c,SMALLDOUBLE,1.0-SMALLDOUBLE,par(MIN)|par(MAX)|par(CUR),defFreqC,"freqC");	param[GTR::freqG]=new FullParameter(g,SMALLDOUBLE,1.0-SMALLDOUBLE,par(MIN)|par(MAX)|par(CUR),defFreqG,"freqG");	param[GTR::freqT]=new FullParameter(1.0-a-c-g,SMALLDOUBLE,1.0-SMALLDOUBLE,par(MIN)|par(MAX)|par(CUR),1.0-defFreqA-defFreqC-defFreqG,"freqT");	param[GTR::rAC]=new PositiveParameter(ac,par(MIN)|par(CUR),defrAC);	param[GTR::rAG]=new PositiveParameter(ag,par(MIN)|par(CUR),defrAG);	param[GTR::rAT]=new PositiveParameter(at,par(MIN)|par(CUR),defrAT);	param[GTR::rCG]=new PositiveParameter(cg,par(MIN)|par(CUR),defrCG);	param[GTR::rCT]=new PositiveParameter(ct,par(MIN)|par(CUR),defrCT);	param[GTR::rGT]=new PositiveParameter(1.0,par(MIN)|par(CUR),defrGT);	stateFreqs=new FreqParamGroup(4,(param+GTR::freqA));	CalculateBeta();}GTR::~GTR(){	for(int i=0;i<nparams;i++)		delete param[i];	delete [] param;}void GTR::CalculateBeta()//Beta is a factor that is multiplied to the branchlength to make the eqns in //Molecular Systematics work.  This the constraint that Sum qii * freq(i) = -1 this ensures that the branches are in length//that are expected numbers of changes  //For GTR the rate params are scaled down to maintain their same ratio, but make beta=1.0{	double x,y;	beta=1.0;	x=0.0;/*	x+= param[GTR::freqA]->val+param[GTR::freqC]->val*param[GTR::rAC]->val;	x+= param[GTR::freqA]->val*param[GTR::freqG]->val*param[GTR::rAG]->val;	x+= param[GTR::freqA]->val*param[GTR::freqT]->val*param[GTR::rAT]->val;	x+= param[GTR::freqC]->val*param[GTR::freqG]->val*param[GTR::rCG]->val;	x+= param[GTR::freqC]->val*param[GTR::freqT]->val*param[GTR::rCT]->val;	x+= param[GTR::freqG]->val*param[GTR::freqT]->val*param[GTR::rGT]->val;*/	x+= param[GTR::freqA]->val*param[GTR::freqC]->val*param[GTR::rAC]->val;	x+= param[GTR::freqA]->val*param[GTR::freqG]->val*param[GTR::rAG]->val;	x+= param[GTR::freqA]->val*param[GTR::freqT]->val*param[GTR::rAT]->val;	x+= param[GTR::freqC]->val*param[GTR::freqG]->val*param[GTR::rCG]->val;	x+= param[GTR::freqC]->val*param[GTR::freqT]->val*param[GTR::rCT]->val;	x+= param[GTR::freqG]->val*param[GTR::freqT]->val*param[GTR::rGT]->val;	y=1.0/(2.0*x);	param[GTR::rAC]->val=param[GTR::rAC]->val*y;	param[GTR::rAG]->val=param[GTR::rAG]->val*y;	param[GTR::rAT]->val=param[GTR::rAT]->val*y;	param[GTR::rCG]->val=param[GTR::rCG]->val*y;	param[GTR::rCT]->val=param[GTR::rCT]->val*y;	param[GTR::rGT]->val=param[GTR::rGT]->val*y;}/*void GTR::UpdatePmat(double blen){	ModelWEig::UpdatePmat(blen);}void GTR::UpdatePmatGamma(double blen){	ModelWEig::UpdatePmatGamma(blen);}	*/	void GTR::CalculateQ(void)//in GTR beta is always 1 and the other parameters are scaled.  so we don't need to include beta here{	double *qm;	CalculateBeta();	qm=*qMatrix;	qm[1]=param[GTR::freqC]->val*param[GTR::rAC]->val; 	//AC	qm[2]=param[GTR::freqG]->val*param[GTR::rAG]->val;	//AG	qm[3]=param[GTR::freqT]->val*param[GTR::rAT]->val;	//AT	qm[0]=0.0-qm[1]-qm[2]-qm[3];		//AA	qm[4]=param[GTR::freqA]->val*param[GTR::rAC]->val;	//CA	qm[6]=param[GTR::freqG]->val*param[GTR::rCG]->val;	//CG	qm[7]=param[GTR::freqT]->val*param[GTR::rCT]->val;	//CT	qm[5]=0.0-qm[4]-qm[6]-qm[7];		//CC	qm[8]=param[GTR::freqA]->val*param[GTR::rAG]->val;	//GA	qm[9]=param[GTR::freqC]->val*param[GTR::rCG]->val;	//GC	qm[11]=param[GTR::freqT]->val*param[GTR::rGT]->val;	//GT	qm[10]=0.0-qm[8]-qm[9]-qm[11];		//GG	qm[12]=param[GTR::freqA]->val*param[GTR::rAT]->val;	//TA	qm[13]=param[GTR::freqC]->val*param[GTR::rCT]->val;	//TC	qm[14]=param[GTR::freqG]->val*param[GTR::rGT]->val;	//TG	qm[15]=0.0-qm[12]-qm[13]-qm[14];	//TT}void GTR::InitializeParameters(){	RateManager::InitializeParameters();	for(int i=0;i<nparams;i++)		{if(param[i]->StartWithCurrent()) ;		else	if(param[i]->StartWithRandom())					throw IncompleteModel("Random Function to initialize parameters isn't available yet");				//param[i]->val=SomeRandomNumberFunction();		else	if(param[i]->StartWithApproximation())					throw IncompleteModel("Initial approximation of parameters isn't available yet");		else	if(param[i]->StartWithDefault())					param[i]->SetToDefault();		else	throw BadSettings("No starting value of a parameter has been defined");		}}void GTR::PrintPAUPLsetCommand(){		CalculateBeta();	Model::PrintPAUPLsetCommand();	cout<<"nst=6 rmatrix=(";	cout<<param[GTR::rAC]->val/param[GTR::rGT]->val<<" ";	cout<<param[GTR::rAG]->val/param[GTR::rGT]->val<<" ";	cout<<param[GTR::rAT]->val/param[GTR::rGT]->val<<" ";	cout<<param[GTR::rCG]->val/param[GTR::rGT]->val<<" ";	cout<<param[GTR::rCT]->val/param[GTR::rGT]->val<<") basefreq = (";	cout<<param[GTR::freqA]->val<<" ";	cout<<param[GTR::freqC]->val<<" ";	cout<<param[GTR::freqG]->val<<");"<<endl;}void GTR::PrintBullLsettingsCommand(){	CalculateBeta();	cout<<"GTR(";	cout<<param[GTR::freqA]->val<<" , ";	cout<<param[GTR::freqC]->val<<" , ";	cout<<param[GTR::freqG]->val<<" , ";	cout<<param[GTR::rAC]->val/param[GTR::rGT]->val<<" , ";	cout<<param[GTR::rAG]->val/param[GTR::rGT]->val<<" , ";	cout<<param[GTR::rAT]->val/param[GTR::rGT]->val<<" , ";	cout<<param[GTR::rCG]->val/param[GTR::rGT]->val<<",  ";	cout<<param[GTR::rCT]->val/param[GTR::rGT]->val;	Model::PrintBullLsettingsCommand();}
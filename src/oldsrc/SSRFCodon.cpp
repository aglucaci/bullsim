#include "SSRFCodon.h"double SSRFCodon::defFreqA(.25);double SSRFCodon::defFreqC(.25);double SSRFCodon::defFreqG(.25);double SSRFCodon::defrAC(1);double SSRFCodon::defrAG(2);double SSRFCodon::defrAT(1);double SSRFCodon::defrCG(1);double SSRFCodon::defrCT(2);double SSRFCodon::defrGT(1);double SSRFCodon::defA(.05);double SSRFCodon::defC(.05);double SSRFCodon::defD(.05);double SSRFCodon::defE(.05);double SSRFCodon::defF(.05);double SSRFCodon::defG(.05);double SSRFCodon::defH(.05);double SSRFCodon::defI(.05);double SSRFCodon::defK(.05);double SSRFCodon::defL(.05);double SSRFCodon::defM(.05);double SSRFCodon::defN(.05);double SSRFCodon::defP(.05);double SSRFCodon::defQ(.05);double SSRFCodon::defR(.05);double SSRFCodon::defS(.05);double SSRFCodon::defT(.05);double SSRFCodon::defV(.05);double SSRFCodon::defW(.05);double SSRFCodon::defY(.05);double SSRFCodon::defStop(.00);double SSRFCodon::defRate(1);bool slowway;SSRFCodon::SSRFCodon(Parameter * gtrParams,FreqParamGroup *nucleoFreqs,double *ssrfParams,double **vecPreAlloc/*size 4*/,double ***matPreAlloc/*size 3*/,complex ***complexPreAlloc/*size 2*/,double ***pMat,int codnu)	: ModelWEig(64,vecPreAlloc,matPreAlloc,complexPreAlloc,pMat){	nparams=31;	param=new Parameter *[nparams];	param[SSRFCodon::blenMult]=gtrParams+SSRFCodon::blenMult;//to allow getting all of the branch lengths in the right range before optimizing separately	param[SSRFCodon::freqA]=gtrParams+SSRFCodon::freqA;	param[SSRFCodon::freqC]=gtrParams+SSRFCodon::freqC;	param[SSRFCodon::freqG]=gtrParams+SSRFCodon::freqG;	param[SSRFCodon::freqT]=gtrParams+SSRFCodon::freqT;	param[SSRFCodon::rAC]=gtrParams+SSRFCodon::rAC;	param[SSRFCodon::rAG]=gtrParams+SSRFCodon::rAG;	param[SSRFCodon::rAT]=gtrParams+SSRFCodon::rAT;	param[SSRFCodon::rCG]=gtrParams+SSRFCodon::rCG;	param[SSRFCodon::rCT]=gtrParams+SSRFCodon::rCT;	param[SSRFCodon::rGT]=gtrParams+SSRFCodon::rGT;	sharedBrLenInterpreter=gtrParams+SSRFCodon::rGT+1;	SharedConstruction(nucleoFreqs,ssrfParams,codnu);}	SSRFCodon::SSRFCodon(Parameter ** gtrParams,FreqParamGroup *nucleoFreqs,double *ssrfParams,double *vecPreAlloc,int codnu)	: ModelWEig(64,vecPreAlloc){	nparams=31;	param=new Parameter *[nparams];	param[SSRFCodon::blenMult]=gtrParams[SSRFCodon::blenMult];	param[SSRFCodon::freqA]=gtrParams[SSRFCodon::freqA];	param[SSRFCodon::freqC]=gtrParams[SSRFCodon::freqC];	param[SSRFCodon::freqG]=gtrParams[SSRFCodon::freqG];	param[SSRFCodon::freqT]=gtrParams[SSRFCodon::freqT];	param[SSRFCodon::rAC]=gtrParams[SSRFCodon::rAC];	param[SSRFCodon::rAG]=gtrParams[SSRFCodon::rAG];	param[SSRFCodon::rAT]=gtrParams[SSRFCodon::rAT];	param[SSRFCodon::rCG]=gtrParams[SSRFCodon::rCG];	param[SSRFCodon::rCT]=gtrParams[SSRFCodon::rCT];	param[SSRFCodon::rGT]=gtrParams[SSRFCodon::rGT];	sharedBrLenInterpreter=gtrParams[SSRFCodon::rGT+1];	SharedConstruction(nucleoFreqs,ssrfParams,codnu);}	void 	SSRFCodon::SharedConstruction(FreqParamGroup *nucleoFreqs,double *ssrfParams,int codnu){	SSRkContrib=0.0;	nCodonsInProtein=codnu;	nfreqParamGroups=2;	baseFreqs=nucleoFreqs;	int i;	bool oneAminoAcid=false;//if true treat the codon freqs as 	bool onlyTwoAdfAminoAcids=false;//#ifdef NOSTOPCODONS	double total=0.0;	for(i=SSRFCodon::fA;i<=SSRFCodon::fY;i++)		total+=ssrfParams[i-SSRFCodon::fA];	assert(abs(total-1.0)<0.00001);	for(i=SSRFCodon::fA;i<=SSRFCodon::fY;i++)		ssrfParams[i-SSRFCodon::fA]/=total;#endif	for(i=SSRFCodon::fA;i<=SSRFCodon::fY;i++)		if(abs(ssrfParams[i-SSRFCodon::fA]-1.0)<0.0000001)			oneAminoAcid=true;	if(oneAminoAcid)		{for(i=SSRFCodon::fA;i<=SSRFCodon::fY;i++)			param[i]=new FullParameter(ssrfParams[i-SSRFCodon::fA],0.0,1.0,par(MIN)|par(MAX)|par(CUR)|par(FIX),defA,"Amino");#ifdef NOSTOPCODONS		param[i]=new FullParameter(0.0,0.0,1.0,par(MIN)|par(MAX)|par(CUR)|par(FIX),defStop,"Stop");#else		param[i]=new FullParameter(ssrfParams[i-SSRFCodon::fA],0.0,1.0,par(MIN)|par(MAX)|par(CUR)|par(FIX),defStop,"Stop");#endif			}	else		{for(i=SSRFCodon::fA;i<=SSRFCodon::fY;i++)			if(ssrfParams[i-SSRFCodon::fA]>0.0 || IsBetweenNonZeroFreqAminoAcids(i-SSRFCodon::fA,ssrfParams))				param[i]=new FullParameter(ssrfParams[i-SSRFCodon::fA],0.0,1.0,par(MIN)|par(MAX)|par(CUR),defA,"Amino");			else	param[i]=new FullParameter(0.0,0.0,1.0,par(MIN)|par(MAX)|par(CUR)|par(FIX),defA,"Amino");#ifdef NOSTOPCODONS		param[i]=new FullParameter(0.0,0.0,1.0,par(MIN)|par(MAX)|par(FIX),defStop,"Stop");#else		if(ssrfParams[i-SSRFCodon::fA]>0.0 || IsBetweenNonZeroFreqAminoAcids(i-SSRFCodon::fA,ssrfParams))			param[i]=new FullParameter(ssrfParams[i-SSRFCodon::fA],0.0,1.0,par(MIN)|par(MAX)|par(CUR),defStop,"Stop");		else	param[i]=new FullParameter(0.0,0.0,1.0,par(MIN)|par(MAX)|par(CUR)|par(FIX),defA,"Amino");#endif		}	aaFreqs=new FreqParamGroup(21,(param+SSRFCodon::fA));	stateFreqs=NULL;	codFreqs=new double*[64];//awkward because in other models the state freqs might not be contiguous in memory	*codFreqs=new double[64];	for(int j=1;j<64;j++)		codFreqs[j]=(codFreqs[0]+j);	for(int j=0;j<64;j++)		for(int k=0;k<64;k++)			qMatrix[j][k]=0.0;			CalculateQ(); //initializes RateConst parameter and codon freqs}void SSRFCodon::CalculateCodonFreqs(){	double codSum;	double temp; 	double tot=0.0; 	double frA=param[SSRFCodon::freqA]->val; 	double frC=param[SSRFCodon::freqC]->val; 	double frG=param[SSRFCodon::freqG]->val; 	double frT=param[SSRFCodon::freqT]->val; 	double PIA=frA/(frA+frG);	double PIC=frC/(frC+frT); 		if(!slowway)		{if(param[SSRFCodon::fA]->val>0.0)	 		{tot+=*codFreqs[36]=param[SSRFCodon::fA]->val*frA;	 		tot+=*codFreqs[37]=param[SSRFCodon::fA]->val*frC;	 		tot+=*codFreqs[38]=param[SSRFCodon::fA]->val*frG;	 		tot+=*codFreqs[39]=param[SSRFCodon::fA]->val-*codFreqs[36]-*codFreqs[37]-*codFreqs[38];	 		}	 	else	{*codFreqs[36]=*codFreqs[37]=*codFreqs[38]=*codFreqs[39]=0.0;}	 	if(param[SSRFCodon::fC]->val>0.0)	 		{tot+=*codFreqs[57]=param[SSRFCodon::fC]->val*PIC;	 		tot+=*codFreqs[59]=param[SSRFCodon::fC]->val-*codFreqs[57];	 		}	 	else	{*codFreqs[57]=*codFreqs[59]=0.0;}	 	if(param[SSRFCodon::fD]->val>0.0)	 		{tot+=*codFreqs[33]=param[SSRFCodon::fD]->val*PIC;	 		tot+=*codFreqs[35]=param[SSRFCodon::fD]->val-*codFreqs[33];	 		}	 	else	{*codFreqs[33]=*codFreqs[35]=0.0;}	 	if(param[SSRFCodon::fE]->val>0.0)	 		{tot+=*codFreqs[32]=param[SSRFCodon::fE]->val*PIA;	 		tot+=*codFreqs[34]=param[SSRFCodon::fE]->val-*codFreqs[32];	 		}	 	else	{*codFreqs[32]=*codFreqs[34]=0.0;}	 	if(param[SSRFCodon::fF]->val>0.0)	 		{tot+=*codFreqs[61]=param[SSRFCodon::fF]->val*PIC;	 		tot+=*codFreqs[63]=param[SSRFCodon::fF]->val-*codFreqs[61];	 		}	 	else	{*codFreqs[61]=*codFreqs[63]=0.0;}	 	if(param[SSRFCodon::fG]->val>0.0)	 		{tot+=*codFreqs[40]=param[SSRFCodon::fG]->val*frA;	 		tot+=*codFreqs[41]=param[SSRFCodon::fG]->val*frC;	 		tot+=*codFreqs[42]=param[SSRFCodon::fG]->val*frG;	 		tot+=*codFreqs[43]=param[SSRFCodon::fG]->val-*codFreqs[42]-*codFreqs[41]-*codFreqs[40];	 		}	 	else	{*codFreqs[40]=*codFreqs[41]=*codFreqs[42]=*codFreqs[43]=0.0;}	 	if(param[SSRFCodon::fH]->val>0.0)	 		{tot+=*codFreqs[17]=param[SSRFCodon::fH]->val*PIC;	 		tot+=*codFreqs[19]=param[SSRFCodon::fH]->val-*codFreqs[17];	 		}	 	else	{*codFreqs[17]=*codFreqs[19]=0.0;}	 	if(param[SSRFCodon::fI]->val>0.0)	 		{tot+=*codFreqs[13]=param[SSRFCodon::fI]->val*PIC;	 		tot+=*codFreqs[15]=param[SSRFCodon::fI]->val-*codFreqs[13];	 		}	 	else	{*codFreqs[13]=*codFreqs[15]=0.0;}	 	if(param[SSRFCodon::fK]->val>0.0)	 		{tot+=*codFreqs[0]=param[SSRFCodon::fK]->val*PIA;	 		tot+=*codFreqs[2]=param[SSRFCodon::fK]->val-*codFreqs[0];	 		}	 	else	{*codFreqs[0]=*codFreqs[2]=0.0;}	 	if(param[SSRFCodon::fL]->val>0.0)	 		{	 		codSum=frC*frT;	 		codSum+=frT*frT*(frA+frG);	 		tot+=*codFreqs[28]=param[SSRFCodon::fL]->val*frC*frT*frA/codSum;	 		tot+=*codFreqs[29]=param[SSRFCodon::fL]->val*frC*frT*frC/codSum;	 		tot+=*codFreqs[30]=param[SSRFCodon::fL]->val*frC*frT*frG/codSum;	 		tot+=*codFreqs[31]=param[SSRFCodon::fL]->val*frC*frT*frT/codSum;	 		tot+=*codFreqs[60]=param[SSRFCodon::fL]->val*frT*frT*frA/codSum;	 		tot+=*codFreqs[62]=param[SSRFCodon::fL]->val-*codFreqs[28]-*codFreqs[29]-*codFreqs[30]-*codFreqs[31]-*codFreqs[60];	 		}	 	else	{*codFreqs[28]=*codFreqs[29]=*codFreqs[30]=*codFreqs[31]=*codFreqs[60]=*codFreqs[62]=0.0;}	 	if(param[SSRFCodon::fM]->val>0.0)	 		{tot+=*codFreqs[12]=param[SSRFCodon::fM]->val*PIA;	 		tot+=*codFreqs[14]=param[SSRFCodon::fM]->val-*codFreqs[12];	 		}	 	else	{*codFreqs[12]=*codFreqs[14]=0.0;}	 	if(param[SSRFCodon::fN]->val>0.0)	 		{tot+=*codFreqs[1]=param[SSRFCodon::fN]->val*PIC;	 		tot+=*codFreqs[3]=param[SSRFCodon::fN]->val-*codFreqs[1];	 		}	 	else	{*codFreqs[1]=*codFreqs[3]=0.0;}		if(param[SSRFCodon::fP]->val>0.0)	 		{tot+=*codFreqs[20]=param[SSRFCodon::fP]->val*frA;	 		tot+=*codFreqs[21]=param[SSRFCodon::fP]->val*frC;	 		tot+=*codFreqs[22]=param[SSRFCodon::fP]->val*frG;	 		tot+=*codFreqs[23]=param[SSRFCodon::fP]->val-*codFreqs[20]-*codFreqs[21]-*codFreqs[22];	 		}	 	else	{*codFreqs[20]=*codFreqs[21]=*codFreqs[22]=*codFreqs[23]=0.0;}	 	 	if(param[SSRFCodon::fQ]->val>0.0)	 		{tot+=*codFreqs[16]=param[SSRFCodon::fQ]->val*PIA;	 		tot+=*codFreqs[18]=param[SSRFCodon::fQ]->val-*codFreqs[16];	 		}	 	else	{*codFreqs[16]=*codFreqs[18]=0.0;}	 	if(param[SSRFCodon::fR]->val>0.0)	 		{tot+=*codFreqs[24]=param[SSRFCodon::fR]->val*frA;	 		tot+=*codFreqs[25]=param[SSRFCodon::fR]->val*frC;	 		tot+=*codFreqs[26]=param[SSRFCodon::fR]->val*frG;	 		tot+=*codFreqs[27]=param[SSRFCodon::fR]->val-*codFreqs[24]-*codFreqs[25]-*codFreqs[26];	 		}	 	else	{*codFreqs[24]=*codFreqs[25]=*codFreqs[26]=*codFreqs[27]=0.0;}		if(param[SSRFCodon::fS]->val>0.0)	 		{	 		codSum=frC*frT+frA*frG*(frC+frT);	 		tot+=*codFreqs[52]=param[SSRFCodon::fS]->val*frC*frT*frA/codSum;	 		tot+=*codFreqs[53]=param[SSRFCodon::fS]->val*frC*frT*frC/codSum;	 		tot+=*codFreqs[54]=param[SSRFCodon::fS]->val*frC*frT*frG/codSum;	 		tot+=*codFreqs[55]=param[SSRFCodon::fS]->val*frC*frT*frT/codSum;	 		tot+=*codFreqs[9]=param[SSRFCodon::fS]->val*frA*frG*frC/codSum;	 		tot+=*codFreqs[11]=param[SSRFCodon::fS]->val-*codFreqs[52]-*codFreqs[53]-*codFreqs[54]-*codFreqs[55]-*codFreqs[9];	 		}	 	else	{*codFreqs[52]=*codFreqs[53]=*codFreqs[54]=*codFreqs[55]=*codFreqs[9]=*codFreqs[11]=0.0;}	 	if(param[SSRFCodon::fT]->val>0.0)	 		{tot+=*codFreqs[4]=param[SSRFCodon::fT]->val*frA;	 		tot+=*codFreqs[5]=param[SSRFCodon::fT]->val*frC;	 		tot+=*codFreqs[6]=param[SSRFCodon::fT]->val*frG;	 		tot+=*codFreqs[7]=param[SSRFCodon::fT]->val-*codFreqs[4]-*codFreqs[5]-*codFreqs[6];	 		}	 	else	{*codFreqs[4]=*codFreqs[5]=*codFreqs[6]=*codFreqs[7]=0.0;}		if(param[SSRFCodon::fV]->val>0.0)	 		{tot+=*codFreqs[44]=param[SSRFCodon::fV]->val*frA;	 		tot+=*codFreqs[45]=param[SSRFCodon::fV]->val*frC;	 		tot+=*codFreqs[46]=param[SSRFCodon::fV]->val*frG;	 		tot+=*codFreqs[47]=param[SSRFCodon::fV]->val-*codFreqs[44]-*codFreqs[45]-*codFreqs[46];	 		}	 	else	{*codFreqs[44]=*codFreqs[45]=*codFreqs[46]=*codFreqs[47]=0.0;}		 if(param[SSRFCodon::fW]->val>0.0)	 		{tot+=*codFreqs[56]=param[SSRFCodon::fW]->val*PIA;	 		tot+=*codFreqs[58]=param[SSRFCodon::fW]->val-*codFreqs[56];	 		}	 	else	{*codFreqs[56]=*codFreqs[58]=0.0;}	 	if(param[SSRFCodon::fY]->val>0.0)	 		{tot+=*codFreqs[49]=param[SSRFCodon::fY]->val*PIC;	 		tot+=*codFreqs[51]=param[SSRFCodon::fY]->val-*codFreqs[49];	 		}	 	else	{*codFreqs[49]=*codFreqs[51]=0.0;}		if(param[SSRFCodon::fStop]->val>0.0)	 		{	 		codSum=(frA+frG)*(frT+frG);	 		tot+=*codFreqs[8]=param[SSRFCodon::fStop]->val*frG*frA/codSum;	 		tot+=*codFreqs[10]=param[SSRFCodon::fStop]->val*frG*frG/codSum;	 		tot+=*codFreqs[48]=param[SSRFCodon::fStop]->val*frT*frA/codSum;	 		tot+=*codFreqs[50]=param[SSRFCodon::fStop]->val-*codFreqs[8]-*codFreqs[10]-*codFreqs[48];	 		}	 	else	{*codFreqs[8]=*codFreqs[10]=*codFreqs[48]=*codFreqs[50]=0.0;} 	}	else	 	{if(param[SSRFCodon::fA]->val>0.0)	 		{temp=*codFreqs[36]=param[SSRFCodon::fA]->val*frA;	 		temp+=*codFreqs[37]=param[SSRFCodon::fA]->val*frC;	 		temp+=*codFreqs[38]=param[SSRFCodon::fA]->val*frG;	 		temp+=*codFreqs[39]=param[SSRFCodon::fA]->val-*codFreqs[36]-*codFreqs[37]-*codFreqs[38];	 		tot+=temp;}	 	else	{*codFreqs[36]=*codFreqs[37]=*codFreqs[38]=*codFreqs[39]=0.0;}	 	if(param[SSRFCodon::fC]->val>0.0)	 		{temp=*codFreqs[57]=param[SSRFCodon::fC]->val*PIC;	 		temp+=*codFreqs[59]=param[SSRFCodon::fC]->val-*codFreqs[57];	 		tot+=temp;}	 	else	{*codFreqs[57]=*codFreqs[59]=0.0;}	 	if(param[SSRFCodon::fD]->val>0.0)	 		{temp=*codFreqs[33]=param[SSRFCodon::fD]->val*PIC;	 		temp+=*codFreqs[35]=param[SSRFCodon::fD]->val-*codFreqs[33];	 		tot+=temp;}	 	else	{*codFreqs[33]=*codFreqs[35]=0.0;}	 	if(param[SSRFCodon::fE]->val>0.0)	 		{temp=*codFreqs[32]=param[SSRFCodon::fE]->val*PIA;	 		temp+=*codFreqs[34]=param[SSRFCodon::fE]->val-*codFreqs[32];	 		tot+=temp;}	 	else	{*codFreqs[32]=*codFreqs[34]=0.0;}	 	if(param[SSRFCodon::fF]->val>0.0)	 		{temp=*codFreqs[61]=param[SSRFCodon::fF]->val*PIC;	 		temp+=*codFreqs[63]=param[SSRFCodon::fF]->val-*codFreqs[61];	 		tot+=temp;}	 	else	{*codFreqs[61]=*codFreqs[63]=0.0;}	 	if(param[SSRFCodon::fG]->val>0.0)	 		{temp=*codFreqs[40]=param[SSRFCodon::fG]->val*frA;	 		temp+=*codFreqs[41]=param[SSRFCodon::fG]->val*frC;	 		temp+=*codFreqs[42]=param[SSRFCodon::fG]->val*frG;	 		temp+=*codFreqs[43]=param[SSRFCodon::fG]->val-*codFreqs[42]-*codFreqs[41]-*codFreqs[40];	 		tot+=temp;}	 	else	{*codFreqs[40]=*codFreqs[41]=*codFreqs[42]=*codFreqs[43]=0.0;}	 	if(param[SSRFCodon::fH]->val>0.0)	 		{temp=*codFreqs[17]=param[SSRFCodon::fH]->val*PIC;	 		temp+=*codFreqs[19]=param[SSRFCodon::fH]->val-*codFreqs[17];	 		tot+=temp;}	 	else	{*codFreqs[17]=*codFreqs[19]=0.0;}	 	if(param[SSRFCodon::fI]->val>0.0)	 		{temp=*codFreqs[13]=param[SSRFCodon::fI]->val*PIC;	 		temp+=*codFreqs[15]=param[SSRFCodon::fI]->val-*codFreqs[13];	 		tot+=temp;}	 	else	{*codFreqs[13]=*codFreqs[15]=0.0;}	 	if(param[SSRFCodon::fK]->val>0.0)	 		{temp=*codFreqs[0]=param[SSRFCodon::fK]->val*PIA;	 		temp+=*codFreqs[2]=param[SSRFCodon::fK]->val-*codFreqs[0];	 		tot+=temp;}	 	else	{*codFreqs[0]=*codFreqs[2]=0.0;}	 	if(param[SSRFCodon::fL]->val>0.0)	 		{	 		codSum=frC*frT;	 		codSum+=frT*frT*(frA+frG);	 		temp=*codFreqs[28]=param[SSRFCodon::fL]->val*frC*frT*frA/codSum;	 		temp+=*codFreqs[29]=param[SSRFCodon::fL]->val*frC*frT*frC/codSum;	 		temp+=*codFreqs[30]=param[SSRFCodon::fL]->val*frC*frT*frG/codSum;	 		temp+=*codFreqs[31]=param[SSRFCodon::fL]->val*frC*frT*frT/codSum;	 		temp+=*codFreqs[60]=param[SSRFCodon::fL]->val*frT*frT*frA/codSum;	 		temp+=*codFreqs[62]=param[SSRFCodon::fL]->val-*codFreqs[28]-*codFreqs[29]-*codFreqs[30]-*codFreqs[31]-*codFreqs[60];	 		tot+=temp;}	 	else	{*codFreqs[28]=*codFreqs[29]=*codFreqs[30]=*codFreqs[31]=*codFreqs[60]=*codFreqs[62]=0.0;}	 	if(param[SSRFCodon::fM]->val>0.0)	 		{temp=*codFreqs[12]=param[SSRFCodon::fM]->val*PIA;	 		temp+=*codFreqs[14]=param[SSRFCodon::fM]->val-*codFreqs[12];	 		tot+=temp;}	 	else	{*codFreqs[12]=*codFreqs[14]=0.0;}	 	if(param[SSRFCodon::fN]->val>0.0)	 		{temp=*codFreqs[1]=param[SSRFCodon::fN]->val*PIC;	 		temp+=*codFreqs[3]=param[SSRFCodon::fN]->val-*codFreqs[1];	 		tot+=temp;}	 	else	{*codFreqs[1]=*codFreqs[3]=0.0;}		if(param[SSRFCodon::fP]->val>0.0)	 		{temp=*codFreqs[20]=param[SSRFCodon::fP]->val*frA;	 		temp+=*codFreqs[21]=param[SSRFCodon::fP]->val*frC;	 		temp+=*codFreqs[22]=param[SSRFCodon::fP]->val*frG;	 		temp+=*codFreqs[23]=param[SSRFCodon::fP]->val-*codFreqs[20]-*codFreqs[21]-*codFreqs[22];	 		tot+=temp;}	 	else	{*codFreqs[20]=*codFreqs[21]=*codFreqs[22]=*codFreqs[23]=0.0;}	 	 	if(param[SSRFCodon::fQ]->val>0.0)	 		{temp=*codFreqs[16]=param[SSRFCodon::fQ]->val*PIA;	 		temp+=*codFreqs[18]=param[SSRFCodon::fQ]->val-*codFreqs[16];	 		tot+=temp;}	 	else	{*codFreqs[16]=*codFreqs[18]=0.0;}	 	if(param[SSRFCodon::fR]->val>0.0)	 		{temp=*codFreqs[24]=param[SSRFCodon::fR]->val*frA;	 		temp+=*codFreqs[25]=param[SSRFCodon::fR]->val*frC;	 		temp+=*codFreqs[26]=param[SSRFCodon::fR]->val*frG;	 		temp+=*codFreqs[27]=param[SSRFCodon::fR]->val-*codFreqs[24]-*codFreqs[25]-*codFreqs[26];	 		tot+=temp;}	 	else	{*codFreqs[24]=*codFreqs[25]=*codFreqs[26]=*codFreqs[27]=0.0;}		if(param[SSRFCodon::fS]->val>0.0)	 		{	 		codSum=frC*frT+frA*frG*(frC+frT);	 		temp=*codFreqs[52]=param[SSRFCodon::fS]->val*frC*frT*frA/codSum;	 		temp+=*codFreqs[53]=param[SSRFCodon::fS]->val*frC*frT*frC/codSum;	 		temp+=*codFreqs[54]=param[SSRFCodon::fS]->val*frC*frT*frG/codSum;	 		temp+=*codFreqs[55]=param[SSRFCodon::fS]->val*frC*frT*frT/codSum;	 		temp+=*codFreqs[9]=param[SSRFCodon::fS]->val*frA*frG*frC/codSum;	 		temp+=*codFreqs[11]=param[SSRFCodon::fS]->val-*codFreqs[52]-*codFreqs[53]-*codFreqs[54]-*codFreqs[55]-*codFreqs[9];	 		tot+=temp;}	 	else	{*codFreqs[52]=*codFreqs[53]=*codFreqs[54]=*codFreqs[55]=*codFreqs[9]=*codFreqs[11]=0.0;}	 	if(param[SSRFCodon::fT]->val>0.0)	 		{temp=*codFreqs[4]=param[SSRFCodon::fT]->val*frA;	 		temp+=*codFreqs[5]=param[SSRFCodon::fT]->val*frC;	 		temp+=*codFreqs[6]=param[SSRFCodon::fT]->val*frG;	 		temp+=*codFreqs[7]=param[SSRFCodon::fT]->val-*codFreqs[4]-*codFreqs[5]-*codFreqs[6];	 		tot+=temp;}	 	else	{*codFreqs[4]=*codFreqs[5]=*codFreqs[6]=*codFreqs[7]=0.0;}		if(param[SSRFCodon::fV]->val>0.0)	 		{temp=*codFreqs[44]=param[SSRFCodon::fV]->val*frA;	 		temp+=*codFreqs[45]=param[SSRFCodon::fV]->val*frC;	 		temp+=*codFreqs[46]=param[SSRFCodon::fV]->val*frG;	 		temp+=*codFreqs[47]=param[SSRFCodon::fV]->val-*codFreqs[44]-*codFreqs[45]-*codFreqs[46];	 		tot+=temp;}	 	else	{*codFreqs[44]=*codFreqs[45]=*codFreqs[46]=*codFreqs[47]=0.0;}		 if(param[SSRFCodon::fW]->val>0.0)	 		{temp=*codFreqs[56]=param[SSRFCodon::fW]->val*PIA;	 		temp+=*codFreqs[58]=param[SSRFCodon::fW]->val-*codFreqs[56];	 		tot+=temp;}	 	else	{*codFreqs[56]=*codFreqs[58]=0.0;}	 	if(param[SSRFCodon::fY]->val>0.0)	 		{temp=*codFreqs[49]=param[SSRFCodon::fY]->val*PIC;	 		temp+=*codFreqs[51]=param[SSRFCodon::fY]->val-*codFreqs[49];	 		tot+=temp;}	 	else	{*codFreqs[49]=*codFreqs[51]=0.0;}		if(param[SSRFCodon::fStop]->val>0.0)	 		{	 		codSum=(frA+frG)*(frT+frG);	 		temp=*codFreqs[8]=param[SSRFCodon::fStop]->val*frG*frA/codSum;	 		temp+=*codFreqs[10]=param[SSRFCodon::fStop]->val*frG*frG/codSum;	 		temp+=*codFreqs[48]=param[SSRFCodon::fStop]->val*frT*frA/codSum;	 		temp+=*codFreqs[50]=param[SSRFCodon::fStop]->val-*codFreqs[8]-*codFreqs[10]-*codFreqs[48];	 		tot+=temp;}	 	else	{*codFreqs[8]=*codFreqs[10]=*codFreqs[48]=*codFreqs[50]=0.0;}	 	}	if(!(abs(tot-1.0)<SMALLDOUBLE)) 		throw MTHException("Codon Frequencies don't add up to 1"); 	}SSRFCodon::~SSRFCodon(){	for(int i=SSRFCodon::fA;i<nparams;i++)//don't delete the shared GTR parameters		delete param[i];	delete [] param;	REigenValues=NULL;//sharing memory, so we don't want to double delete, do we?	EigInvEigMat=NULL;	ImEigenValues=NULL;	REigenVector=NULL;	InvEigenVector=NULL;	CEigenVector=NULL;	CInvEigenVector=NULL;	qMatrix=NULL;	EigExp=NULL;	}double  SSRFCodon::CalculateBeta()//Beta is a factor that is multiplied to the branchlength to make the eqns in //Molecular Systematics work.  This the constraint that Sum qii * freq(i) = -1 this ensures that the branches are in length//that are expected numbers of changes  //SSRkContrib is the defined k constant, this function maintains the rates//For GTR the rate params are scaled down to maintain their same ratio, but make beta=1.0{	throw	MTHException("Entered unwritten code SSRFCodon::CalculateBeta" );/*		double x,y;	x=0.0;	double *qm;	qm=*qMatrix;	//assumes that calculate code freq;	double *codF=*codFreqs;	if(param[SSRFCodon::fA]->val>0.0)		{qm[2340]=0.0-qm[2308]-qm[2324]-qm[2336]-qm[2341]-qm[2342]-qm[2343]-qm[2344]-qm[2348]-qm[2356];		x-=codF[36]*qm[2340];		qm[2405]=0.0-qm[2373]-qm[2389]-qm[2401]-qm[2404]-qm[2406]-qm[2407]-qm[2409]-qm[2413]-qm[2421];		x-=codF[37]*qm[2405];		qm[2470]=0.0-qm[2438]-qm[2454]-qm[2466]-qm[2468]-qm[2469]-qm[2471]-qm[2474]-qm[2478]-qm[2486];		x-=codF[38]*qm[2470];		qm[2535]=0.0-qm[2503]-qm[2519]-qm[2531]-qm[2532]-qm[2533]-qm[2534]-qm[2539]-qm[2543]-qm[2551];		x-=codF[39]*qm[2535];		}	if(param[SSRFCodon::fC]->val>0.0)		{qm[3705]=0.0-qm[3657]-qm[3673]-qm[3689]-qm[3697]-qm[3701]-qm[3704]-qm[3706]-qm[3707]-qm[3709];		x-=codF[57]*qm[3705];		qm[3835]=0.0-qm[3787]-qm[3803]-qm[3819]-qm[3827]-qm[3831]-qm[3832]-qm[3833]-qm[3834]-qm[3839];		x-=codF[59]*qm[3835];		}	if(param[SSRFCodon::fD]->val>0.0)		{qm[2145]=0.0-qm[2113]-qm[2129]-qm[2144]-qm[2146]-qm[2147]-qm[2149]-qm[2153]-qm[2157]-qm[2161];		x-=codF[33]*qm[2145];		qm[2275]=0.0-qm[2243]-qm[2259]-qm[2272]-qm[2273]-qm[2274]-qm[2279]-qm[2283]-qm[2287]-qm[2291];		x-=codF[35]*qm[2275];		}	if(param[SSRFCodon::fE]->val>0.0)		{qm[2080]=0.0-qm[2048]-qm[2064]-qm[2081]-qm[2082]-qm[2083]-qm[2084]-qm[2088]-qm[2092]-qm[2096];		x-=codF[32]*qm[2080];		qm[2210]=0.0-qm[2178]-qm[2194]-qm[2208]-qm[2209]-qm[2211]-qm[2214]-qm[2218]-qm[2222]-qm[2226];		x-=codF[34]*qm[2210];		}	if(param[SSRFCodon::fF]->val>0.0)		{qm[3965]=0.0-qm[3917]-qm[3933]-qm[3949]-qm[3953]-qm[3957]-qm[3961]-qm[3964]-qm[3966]-qm[3967];		x-=codF[61]*qm[3965];		qm[4095]=0.0-qm[4047]-qm[4063]-qm[4079]-qm[4083]-qm[4087]-qm[4091]-qm[4092]-qm[4093]-qm[4094];		x-=codF[63]*qm[4095];		}	if(param[SSRFCodon::fG]->val>0.0)		{qm[2600]=0.0-qm[2568]-qm[2584]-qm[2592]-qm[2596]-qm[2601]-qm[2602]-qm[2603]-qm[2604]-qm[2616];		x-=codF[40]*qm[2600];		qm[2665]=0.0-qm[2633]-qm[2649]-qm[2657]-qm[2661]-qm[2664]-qm[2666]-qm[2667]-qm[2669]-qm[2681];		x-=codF[41]*qm[2665];		qm[2730]=0.0-qm[2698]-qm[2714]-qm[2722]-qm[2726]-qm[2728]-qm[2729]-qm[2731]-qm[2734]-qm[2746];		x-=codF[42]*qm[2730];		qm[2795]=0.0-qm[2763]-qm[2779]-qm[2787]-qm[2791]-qm[2792]-qm[2793]-qm[2794]-qm[2799]-qm[2811];		x-=codF[43]*qm[2795];		}	if(param[SSRFCodon::fH]->val>0.0)		{qm[1105]=0.0-qm[1089]-qm[1104]-qm[1106]-qm[1107]-qm[1109]-qm[1113]-qm[1117]-qm[1121]-qm[1137];		x-=codF[17]*qm[1105];		qm[1235]=0.0-qm[1219]-qm[1232]-qm[1233]-qm[1234]-qm[1239]-qm[1243]-qm[1247]-qm[1251]-qm[1267];		x-=codF[19]*qm[1235];		}	if(param[SSRFCodon::fI]->val>0.0)		{qm[845]=0.0-qm[833]-qm[837]-qm[841]-qm[844]-qm[846]-qm[847]-qm[861]-qm[877]-qm[893];		x-=codF[13]*qm[845];		qm[975]=0.0-qm[963]-qm[967]-qm[971]-qm[972]-qm[973]-qm[974]-qm[991]-qm[1007]-qm[1023];		x-=codF[15]*qm[975];		}	if(param[SSRFCodon::fK]->val>0.0)		{qm[0]=0.0-qm[1]-qm[2]-qm[3]-qm[4]-qm[8]-qm[12]-qm[16]-qm[32]-qm[48];		x-=codF[0]*qm[0];		qm[130]=0.0-qm[128]-qm[129]-qm[131]-qm[134]-qm[138]-qm[142]-qm[146]-qm[162]-qm[178];		x-=codF[2]*qm[130];		}	if(param[SSRFCodon::fL]->val>0.0)		{qm[1820]=0.0-qm[1804]-qm[1808]-qm[1812]-qm[1816]-qm[1821]-qm[1822]-qm[1823]-qm[1836]-qm[1852];		x-=codF[28]*qm[1820];		qm[1885]=0.0-qm[1869]-qm[1873]-qm[1877]-qm[1881]-qm[1884]-qm[1886]-qm[1887]-qm[1901]-qm[1917];		x-=codF[29]*qm[1885];		qm[1950]=0.0-qm[1934]-qm[1938]-qm[1942]-qm[1946]-qm[1948]-qm[1949]-qm[1951]-qm[1966]-qm[1982];		x-=codF[30]*qm[1950];		qm[2015]=0.0-qm[1999]-qm[2003]-qm[2007]-qm[2011]-qm[2012]-qm[2013]-qm[2014]-qm[2031]-qm[2047];		x-=codF[31]*qm[2015];		qm[3900]=0.0-qm[3852]-qm[3868]-qm[3884]-qm[3888]-qm[3892]-qm[3896]-qm[3901]-qm[3902]-qm[3903];		x-=codF[60]*qm[3900];		qm[4030]=0.0-qm[3982]-qm[3998]-qm[4014]-qm[4018]-qm[4022]-qm[4026]-qm[4028]-qm[4029]-qm[4031];		x-=codF[62]*qm[4030];		}	if(param[SSRFCodon::fM]->val>0.0)		{qm[780]=0.0-qm[768]-qm[772]-qm[776]-qm[781]-qm[782]-qm[783]-qm[796]-qm[812]-qm[828];		x-=codF[12]*qm[780];		qm[910]=0.0-qm[898]-qm[902]-qm[906]-qm[908]-qm[909]-qm[911]-qm[926]-qm[942]-qm[958];		x-=codF[14]*qm[910];		}	if(param[SSRFCodon::fN]->val>0.0)		{qm[65]=0.0-qm[64]-qm[66]-qm[67]-qm[69]-qm[73]-qm[77]-qm[81]-qm[97]-qm[113];		x-=codF[1]*qm[65];		qm[195]=0.0-qm[192]-qm[193]-qm[194]-qm[199]-qm[203]-qm[207]-qm[211]-qm[227]-qm[243];		x-=codF[3]*qm[195];		}	if(param[SSRFCodon::fP]->val>0.0)		{qm[1300]=0.0-qm[1284]-qm[1296]-qm[1301]-qm[1302]-qm[1303]-qm[1304]-qm[1308]-qm[1316]-qm[1332];		x-=codF[20]*qm[1300];		qm[1365]=0.0-qm[1349]-qm[1361]-qm[1364]-qm[1366]-qm[1367]-qm[1369]-qm[1373]-qm[1381]-qm[1397];		x-=codF[21]*qm[1365];		qm[1430]=0.0-qm[1414]-qm[1426]-qm[1428]-qm[1429]-qm[1431]-qm[1434]-qm[1438]-qm[1446]-qm[1462];		x-=codF[22]*qm[1430];		qm[1495]=0.0-qm[1479]-qm[1491]-qm[1492]-qm[1493]-qm[1494]-qm[1499]-qm[1503]-qm[1511]-qm[1527];		x-=codF[23]*qm[1495];		}	if(param[SSRFCodon::fQ]->val>0.0)		{qm[1040]=0.0-qm[1024]-qm[1041]-qm[1042]-qm[1043]-qm[1044]-qm[1048]-qm[1052]-qm[1056]-qm[1072];		x-=codF[16]*qm[1040];		qm[1170]=0.0-qm[1154]-qm[1168]-qm[1169]-qm[1171]-qm[1174]-qm[1178]-qm[1182]-qm[1186]-qm[1202];		x-=codF[18]*qm[1170];		}	if(param[SSRFCodon::fR]->val>0.0)		{qm[1560]=0.0-qm[1544]-qm[1552]-qm[1556]-qm[1561]-qm[1562]-qm[1563]-qm[1564]-qm[1576]-qm[1592];		x-=codF[24]*qm[1560];		qm[1625]=0.0-qm[1609]-qm[1617]-qm[1621]-qm[1624]-qm[1626]-qm[1627]-qm[1629]-qm[1641]-qm[1657];		x-=codF[25]*qm[1625];		qm[1690]=0.0-qm[1674]-qm[1682]-qm[1686]-qm[1688]-qm[1689]-qm[1691]-qm[1694]-qm[1706]-qm[1722];		x-=codF[26]*qm[1690];		qm[1755]=0.0-qm[1739]-qm[1747]-qm[1751]-qm[1752]-qm[1753]-qm[1754]-qm[1759]-qm[1771]-qm[1787];		x-=codF[27]*qm[1755];		}	if(param[SSRFCodon::fS]->val>0.0)		{qm[585]=0.0-qm[577]-qm[581]-qm[584]-qm[586]-qm[587]-qm[589]-qm[601]-qm[617]-qm[633];		x-=codF[9]*qm[585];		qm[715]=0.0-qm[707]-qm[711]-qm[712]-qm[713]-qm[714]-qm[719]-qm[731]-qm[747]-qm[763];		x-=codF[11]*qm[715];		qm[3380]=0.0-qm[3332]-qm[3348]-qm[3364]-qm[3376]-qm[3381]-qm[3382]-qm[3383]-qm[3384]-qm[3388];		x-=codF[52]*qm[3380];		qm[3445]=0.0-qm[3397]-qm[3413]-qm[3429]-qm[3441]-qm[3444]-qm[3446]-qm[3447]-qm[3449]-qm[3453];		x-=codF[53]*qm[3445];		qm[3510]=0.0-qm[3462]-qm[3478]-qm[3494]-qm[3506]-qm[3508]-qm[3509]-qm[3511]-qm[3514]-qm[3518];		x-=codF[54]*qm[3510];		qm[3575]=0.0-qm[3527]-qm[3543]-qm[3559]-qm[3571]-qm[3572]-qm[3573]-qm[3574]-qm[3579]-qm[3583];		x-=codF[55]*qm[3575];		}	if(param[SSRFCodon::fT]->val>0.0)		{qm[260]=0.0-qm[256]-qm[261]-qm[262]-qm[263]-qm[264]-qm[268]-qm[276]-qm[292]-qm[308];		x-=codF[4]*qm[260];		qm[325]=0.0-qm[321]-qm[324]-qm[326]-qm[327]-qm[329]-qm[333]-qm[341]-qm[357]-qm[373];		x-=codF[5]*qm[325];		qm[390]=0.0-qm[386]-qm[388]-qm[389]-qm[391]-qm[394]-qm[398]-qm[406]-qm[422]-qm[438];		x-=codF[6]*qm[390];		qm[455]=0.0-qm[451]-qm[452]-qm[453]-qm[454]-qm[459]-qm[463]-qm[471]-qm[487]-qm[503];		x-=codF[7]*qm[455];		}	if(param[SSRFCodon::fV]->val>0.0)		{qm[2860]=0.0-qm[2828]-qm[2844]-qm[2848]-qm[2852]-qm[2856]-qm[2861]-qm[2862]-qm[2863]-qm[2876];		x-=codF[44]*qm[2860];		qm[2925]=0.0-qm[2893]-qm[2909]-qm[2913]-qm[2917]-qm[2921]-qm[2924]-qm[2926]-qm[2927]-qm[2941];		x-=codF[45]*qm[2925];		qm[2990]=0.0-qm[2958]-qm[2974]-qm[2978]-qm[2982]-qm[2986]-qm[2988]-qm[2989]-qm[2991]-qm[3006];		x-=codF[46]*qm[2990];		qm[3055]=0.0-qm[3023]-qm[3039]-qm[3043]-qm[3047]-qm[3051]-qm[3052]-qm[3053]-qm[3054]-qm[3071];		x-=codF[47]*qm[3055];		}	if(param[SSRFCodon::fW]->val>0.0)		{qm[3640]=0.0-qm[3592]-qm[3608]-qm[3624]-qm[3632]-qm[3636]-qm[3641]-qm[3642]-qm[3643]-qm[3644];		x-=codF[56]*qm[3640];		qm[3770]=0.0-qm[3722]-qm[3738]-qm[3754]-qm[3762]-qm[3766]-qm[3768]-qm[3769]-qm[3771]-qm[3774];		x-=codF[58]*qm[3770];		}	if(param[SSRFCodon::fY]->val>0.0)		{qm[3185]=0.0-qm[3137]-qm[3153]-qm[3169]-qm[3184]-qm[3186]-qm[3187]-qm[3189]-qm[3193]-qm[3197];		x-=codF[49]*qm[3185];		qm[3315]=0.0-qm[3267]-qm[3283]-qm[3299]-qm[3312]-qm[3313]-qm[3314]-qm[3319]-qm[3323]-qm[3327];		x-=codF[51]*qm[3315];		}	if(param[SSRFCodon::fStop]->val>0.0)		{qm[520]=0.0-qm[512]-qm[516]-qm[521]-qm[522]-qm[523]-qm[524]-qm[536]-qm[552]-qm[568];		x-=codF[8]*qm[520];		qm[650]=0.0-qm[642]-qm[646]-qm[648]-qm[649]-qm[651]-qm[654]-qm[666]-qm[682]-qm[698];		x-=codF[10]*qm[650];		qm[3120]=0.0-qm[3072]-qm[3088]-qm[3104]-qm[3121]-qm[3122]-qm[3123]-qm[3124]-qm[3128]-qm[3132];		x-=codF[48]*qm[3120];		qm[3250]=0.0-qm[3202]-qm[3218]-qm[3234]-qm[3248]-qm[3249]-qm[3251]-qm[3254]-qm[3258]-qm[3262];		x-=codF[50]*qm[3250];		}		return x;		/*y=SSRkContrib/x;	if(param[SSRFCodon::fA]->val>0.0)		{qm[2340]*=y; qm[2308]*=y; qm[2324]*=y; qm[2336]*=y; qm[2341]*=y; qm[2342]*=y; qm[2343]*=y; qm[2344]*=y; qm[2348]*=y; qm[2356]*=y;		qm[2405]*=y; qm[2373]*=y; qm[2389]*=y; qm[2401]*=y; qm[2404]*=y; qm[2406]*=y; qm[2407]*=y; qm[2409]*=y; qm[2413]*=y; qm[2421]*=y;		qm[2470]*=y; qm[2438]*=y; qm[2454]*=y; qm[2466]*=y; qm[2468]*=y; qm[2469]*=y; qm[2471]*=y; qm[2474]*=y; qm[2478]*=y; qm[2486]*=y;		qm[2535]*=y; qm[2503]*=y; qm[2519]*=y; qm[2531]*=y; qm[2532]*=y; qm[2533]*=y; qm[2534]*=y; qm[2539]*=y; qm[2543]*=y; qm[2551]*=y;		}	if(param[SSRFCodon::fC]->val>0.0)		{qm[3705]*=y; qm[3657]*=y; qm[3673]*=y; qm[3689]*=y; qm[3697]*=y; qm[3701]*=y; qm[3704]*=y; qm[3706]*=y; qm[3707]*=y; qm[3709]*=y;		qm[3835]*=y; qm[3787]*=y; qm[3803]*=y; qm[3819]*=y; qm[3827]*=y; qm[3831]*=y; qm[3832]*=y; qm[3833]*=y; qm[3834]*=y; qm[3839]*=y;		}	if(param[SSRFCodon::fD]->val>0.0)		{qm[2145]*=y; qm[2113]*=y; qm[2129]*=y; qm[2144]*=y; qm[2146]*=y; qm[2147]*=y; qm[2149]*=y; qm[2153]*=y; qm[2157]*=y; qm[2161]*=y;		qm[2275]*=y; qm[2243]*=y; qm[2259]*=y; qm[2272]*=y; qm[2273]*=y; qm[2274]*=y; qm[2279]*=y; qm[2283]*=y; qm[2287]*=y; qm[2291]*=y;		}	if(param[SSRFCodon::fE]->val>0.0)		{qm[2080]*=y; qm[2048]*=y; qm[2064]*=y; qm[2081]*=y; qm[2082]*=y; qm[2083]*=y; qm[2084]*=y; qm[2088]*=y; qm[2092]*=y; qm[2096]*=y;		qm[2210]*=y; qm[2178]*=y; qm[2194]*=y; qm[2208]*=y; qm[2209]*=y; qm[2211]*=y; qm[2214]*=y; qm[2218]*=y; qm[2222]*=y; qm[2226]*=y;		}	if(param[SSRFCodon::fF]->val>0.0)		{qm[3965]*=y; qm[3917]*=y; qm[3933]*=y; qm[3949]*=y; qm[3953]*=y; qm[3957]*=y; qm[3961]*=y; qm[3964]*=y; qm[3966]*=y; qm[3967]*=y;		qm[4095]*=y; qm[4047]*=y; qm[4063]*=y; qm[4079]*=y; qm[4083]*=y; qm[4087]*=y; qm[4091]*=y; qm[4092]*=y; qm[4093]*=y; qm[4094]*=y;		}	if(param[SSRFCodon::fG]->val>0.0)		{qm[2600]*=y; qm[2568]*=y; qm[2584]*=y; qm[2592]*=y; qm[2596]*=y; qm[2601]*=y; qm[2602]*=y; qm[2603]*=y; qm[2604]*=y; qm[2616]*=y;		qm[2665]*=y; qm[2633]*=y; qm[2649]*=y; qm[2657]*=y; qm[2661]*=y; qm[2664]*=y; qm[2666]*=y; qm[2667]*=y; qm[2669]*=y; qm[2681]*=y;		qm[2730]*=y; qm[2698]*=y; qm[2714]*=y; qm[2722]*=y; qm[2726]*=y; qm[2728]*=y; qm[2729]*=y; qm[2731]*=y; qm[2734]*=y; qm[2746]*=y;		qm[2795]*=y; qm[2763]*=y; qm[2779]*=y; qm[2787]*=y; qm[2791]*=y; qm[2792]*=y; qm[2793]*=y; qm[2794]*=y; qm[2799]*=y; qm[2811]*=y;		}	if(param[SSRFCodon::fH]->val>0.0)		{qm[1105]*=y; qm[1089]*=y; qm[1104]*=y; qm[1106]*=y; qm[1107]*=y; qm[1109]*=y; qm[1113]*=y; qm[1117]*=y; qm[1121]*=y; qm[1137]*=y;		qm[1235]*=y; qm[1219]*=y; qm[1232]*=y; qm[1233]*=y; qm[1234]*=y; qm[1239]*=y; qm[1243]*=y; qm[1247]*=y; qm[1251]*=y; qm[1267]*=y;		}	if(param[SSRFCodon::fI]->val>0.0)		{qm[845]*=y; qm[833]*=y; qm[837]*=y; qm[841]*=y; qm[844]*=y; qm[846]*=y; qm[847]*=y; qm[861]*=y; qm[877]*=y; qm[893]*=y;		qm[975]*=y; qm[963]*=y; qm[967]*=y; qm[971]*=y; qm[972]*=y; qm[973]*=y; qm[974]*=y; qm[991]*=y; qm[1007]*=y; qm[1023]*=y;		}	if(param[SSRFCodon::fK]->val>0.0)		{qm[0]*=y; qm[1]*=y; qm[2]*=y; qm[3]*=y; qm[4]*=y; qm[8]*=y; qm[12]*=y; qm[16]*=y; qm[32]*=y; qm[48]*=y;		qm[130]*=y; qm[128]*=y; qm[129]*=y; qm[131]*=y; qm[134]*=y; qm[138]*=y; qm[142]*=y; qm[146]*=y; qm[162]*=y; qm[178]*=y;		}	if(param[SSRFCodon::fL]->val>0.0)		{qm[1820]*=y; qm[1804]*=y; qm[1808]*=y; qm[1812]*=y; qm[1816]*=y; qm[1821]*=y; qm[1822]*=y; qm[1823]*=y; qm[1836]*=y; qm[1852]*=y;		qm[1885]*=y; qm[1869]*=y; qm[1873]*=y; qm[1877]*=y; qm[1881]*=y; qm[1884]*=y; qm[1886]*=y; qm[1887]*=y; qm[1901]*=y; qm[1917]*=y;		qm[1950]*=y; qm[1934]*=y; qm[1938]*=y; qm[1942]*=y; qm[1946]*=y; qm[1948]*=y; qm[1949]*=y; qm[1951]*=y; qm[1966]*=y; qm[1982]*=y;		qm[2015]*=y; qm[1999]*=y; qm[2003]*=y; qm[2007]*=y; qm[2011]*=y; qm[2012]*=y; qm[2013]*=y; qm[2014]*=y; qm[2031]*=y; qm[2047]*=y;		qm[3900]*=y; qm[3852]*=y; qm[3868]*=y; qm[3884]*=y; qm[3888]*=y; qm[3892]*=y; qm[3896]*=y; qm[3901]*=y; qm[3902]*=y; qm[3903]*=y;		qm[4030]*=y; qm[3982]*=y; qm[3998]*=y; qm[4014]*=y; qm[4018]*=y; qm[4022]*=y; qm[4026]*=y; qm[4028]*=y; qm[4029]*=y; qm[4031]*=y;		}	if(param[SSRFCodon::fM]->val>0.0)		{qm[780]*=y; qm[768]*=y; qm[772]*=y; qm[776]*=y; qm[781]*=y; qm[782]*=y; qm[783]*=y; qm[796]*=y; qm[812]*=y; qm[828]*=y;		qm[910]*=y; qm[898]*=y; qm[902]*=y; qm[906]*=y; qm[908]*=y; qm[909]*=y; qm[911]*=y; qm[926]*=y; qm[942]*=y; qm[958]*=y;		}	if(param[SSRFCodon::fN]->val>0.0)		{qm[65]*=y; qm[64]*=y; qm[66]*=y; qm[67]*=y; qm[69]*=y; qm[73]*=y; qm[77]*=y; qm[81]*=y; qm[97]*=y; qm[113]*=y;		qm[195]*=y; qm[192]*=y; qm[193]*=y; qm[194]*=y; qm[199]*=y; qm[203]*=y; qm[207]*=y; qm[211]*=y; qm[227]*=y; qm[243]*=y;		}	if(param[SSRFCodon::fP]->val>0.0)		{qm[1300]*=y; qm[1284]*=y; qm[1296]*=y; qm[1301]*=y; qm[1302]*=y; qm[1303]*=y; qm[1304]*=y; qm[1308]*=y; qm[1316]*=y; qm[1332]*=y;		qm[1365]*=y; qm[1349]*=y; qm[1361]*=y; qm[1364]*=y; qm[1366]*=y; qm[1367]*=y; qm[1369]*=y; qm[1373]*=y; qm[1381]*=y; qm[1397]*=y;		qm[1430]*=y; qm[1414]*=y; qm[1426]*=y; qm[1428]*=y; qm[1429]*=y; qm[1431]*=y; qm[1434]*=y; qm[1438]*=y; qm[1446]*=y; qm[1462]*=y;		qm[1495]*=y; qm[1479]*=y; qm[1491]*=y; qm[1492]*=y; qm[1493]*=y; qm[1494]*=y; qm[1499]*=y; qm[1503]*=y; qm[1511]*=y; qm[1527]*=y;		}	if(param[SSRFCodon::fQ]->val>0.0)		{qm[1040]*=y; qm[1024]*=y; qm[1041]*=y; qm[1042]*=y; qm[1043]*=y; qm[1044]*=y; qm[1048]*=y; qm[1052]*=y; qm[1056]*=y; qm[1072]*=y;		qm[1170]*=y; qm[1154]*=y; qm[1168]*=y; qm[1169]*=y; qm[1171]*=y; qm[1174]*=y; qm[1178]*=y; qm[1182]*=y; qm[1186]*=y; qm[1202]*=y;		}	if(param[SSRFCodon::fR]->val>0.0)		{qm[1560]*=y; qm[1544]*=y; qm[1552]*=y; qm[1556]*=y; qm[1561]*=y; qm[1562]*=y; qm[1563]*=y; qm[1564]*=y; qm[1576]*=y; qm[1592]*=y;		qm[1625]*=y; qm[1609]*=y; qm[1617]*=y; qm[1621]*=y; qm[1624]*=y; qm[1626]*=y; qm[1627]*=y; qm[1629]*=y; qm[1641]*=y; qm[1657]*=y;		qm[1690]*=y; qm[1674]*=y; qm[1682]*=y; qm[1686]*=y; qm[1688]*=y; qm[1689]*=y; qm[1691]*=y; qm[1694]*=y; qm[1706]*=y; qm[1722]*=y;		qm[1755]*=y; qm[1739]*=y; qm[1747]*=y; qm[1751]*=y; qm[1752]*=y; qm[1753]*=y; qm[1754]*=y; qm[1759]*=y; qm[1771]*=y; qm[1787]*=y;		}	if(param[SSRFCodon::fS]->val>0.0)		{qm[585]*=y; qm[577]*=y; qm[581]*=y; qm[584]*=y; qm[586]*=y; qm[587]*=y; qm[589]*=y; qm[601]*=y; qm[617]*=y; qm[633]*=y;		qm[715]*=y; qm[707]*=y; qm[711]*=y; qm[712]*=y; qm[713]*=y; qm[714]*=y; qm[719]*=y; qm[731]*=y; qm[747]*=y; qm[763]*=y;		qm[3380]*=y; qm[3332]*=y; qm[3348]*=y; qm[3364]*=y; qm[3376]*=y; qm[3381]*=y; qm[3382]*=y; qm[3383]*=y; qm[3384]*=y; qm[3388]*=y;		qm[3445]*=y; qm[3397]*=y; qm[3413]*=y; qm[3429]*=y; qm[3441]*=y; qm[3444]*=y; qm[3446]*=y; qm[3447]*=y; qm[3449]*=y; qm[3453]*=y;		qm[3510]*=y; qm[3462]*=y; qm[3478]*=y; qm[3494]*=y; qm[3506]*=y; qm[3508]*=y; qm[3509]*=y; qm[3511]*=y; qm[3514]*=y; qm[3518]*=y;		qm[3575]*=y; qm[3527]*=y; qm[3543]*=y; qm[3559]*=y; qm[3571]*=y; qm[3572]*=y; qm[3573]*=y; qm[3574]*=y; qm[3579]*=y; qm[3583]*=y;		}	if(param[SSRFCodon::fT]->val>0.0)		{qm[260]*=y; qm[256]*=y; qm[261]*=y; qm[262]*=y; qm[263]*=y; qm[264]*=y; qm[268]*=y; qm[276]*=y; qm[292]*=y; qm[308]*=y;		qm[325]*=y; qm[321]*=y; qm[324]*=y; qm[326]*=y; qm[327]*=y; qm[329]*=y; qm[333]*=y; qm[341]*=y; qm[357]*=y; qm[373]*=y;		qm[390]*=y; qm[386]*=y; qm[388]*=y; qm[389]*=y; qm[391]*=y; qm[394]*=y; qm[398]*=y; qm[406]*=y; qm[422]*=y; qm[438]*=y;		qm[455]*=y; qm[451]*=y; qm[452]*=y; qm[453]*=y; qm[454]*=y; qm[459]*=y; qm[463]*=y; qm[471]*=y; qm[487]*=y; qm[503]*=y;		}	if(param[SSRFCodon::fV]->val>0.0)		{qm[2860]*=y; qm[2828]*=y; qm[2844]*=y; qm[2848]*=y; qm[2852]*=y; qm[2856]*=y; qm[2861]*=y; qm[2862]*=y; qm[2863]*=y; qm[2876]*=y;		qm[2925]*=y; qm[2893]*=y; qm[2909]*=y; qm[2913]*=y; qm[2917]*=y; qm[2921]*=y; qm[2924]*=y; qm[2926]*=y; qm[2927]*=y; qm[2941]*=y;		qm[2990]*=y; qm[2958]*=y; qm[2974]*=y; qm[2978]*=y; qm[2982]*=y; qm[2986]*=y; qm[2988]*=y; qm[2989]*=y; qm[2991]*=y; qm[3006]*=y;		qm[3055]*=y; qm[3023]*=y; qm[3039]*=y; qm[3043]*=y; qm[3047]*=y; qm[3051]*=y; qm[3052]*=y; qm[3053]*=y; qm[3054]*=y; qm[3071]*=y;		}	if(param[SSRFCodon::fW]->val>0.0)		{qm[3640]*=y; qm[3592]*=y; qm[3608]*=y; qm[3624]*=y; qm[3632]*=y; qm[3636]*=y; qm[3641]*=y; qm[3642]*=y; qm[3643]*=y; qm[3644]*=y;		qm[3770]*=y; qm[3722]*=y; qm[3738]*=y; qm[3754]*=y; qm[3762]*=y; qm[3766]*=y; qm[3768]*=y; qm[3769]*=y; qm[3771]*=y; qm[3774]*=y;		}	if(param[SSRFCodon::fY]->val>0.0)		{qm[3185]*=y; qm[3137]*=y; qm[3153]*=y; qm[3169]*=y; qm[3184]*=y; qm[3186]*=y; qm[3187]*=y; qm[3189]*=y; qm[3193]*=y; qm[3197]*=y;		qm[3315]*=y; qm[3267]*=y; qm[3283]*=y; qm[3299]*=y; qm[3312]*=y; qm[3313]*=y; qm[3314]*=y; qm[3319]*=y; qm[3323]*=y; qm[3327]*=y;		}	if(param[SSRFCodon::fStop]->val>0.0)		{qm[520]*=y; qm[512]*=y; qm[516]*=y; qm[521]*=y; qm[522]*=y; qm[523]*=y; qm[524]*=y; qm[536]*=y; qm[552]*=y; qm[568]*=y;		qm[650]*=y; qm[642]*=y; qm[646]*=y; qm[648]*=y; qm[649]*=y; qm[651]*=y; qm[654]*=y; qm[666]*=y; qm[682]*=y; qm[698]*=y;		qm[3120]*=y; qm[3072]*=y; qm[3088]*=y; qm[3104]*=y; qm[3121]*=y; qm[3122]*=y; qm[3123]*=y; qm[3124]*=y; qm[3128]*=y; qm[3132]*=y;		qm[3250]*=y; qm[3202]*=y; qm[3218]*=y; qm[3234]*=y; qm[3248]*=y; qm[3249]*=y; qm[3251]*=y; qm[3254]*=y; qm[3258]*=y; qm[3262]*=y;		}*/}	void SSRFCodon::CalculateQ(void){		throw	MTHException("Entered unwritten code SSRFCodon::CalculateQ" );/*	sharedBrLenInterpreter->val-=SSRkContrib/nCodonsInProtein;//subtract out contribution of old qmatrix to mean rate of change		double rpAC=param[SSRFCodon::rAC]->val;	double rpAG=param[SSRFCodon::rAG]->val;	double rpAT=param[SSRFCodon::rAT]->val;	double rpCG=param[SSRFCodon::rCG]->val;	double rpCT=param[SSRFCodon::rCT]->val;	double rpGT=param[SSRFCodon::rGT]->val;	double fpA=param[SSRFCodon::freqA]->val;	double fpC=param[SSRFCodon::freqC]->val;	double fpG=param[SSRFCodon::freqG]->val;	double fpT=param[SSRFCodon::freqT]->val;	double *qm,tempx;	qm=*qMatrix;	double *codF;	CalculateCodonFreqs();	codF=*codFreqs;if(param[SSRFCodon::fA]->val>0.0)	{	qm[2341]=rpAC*fpC;	qm[2342]=rpAG*fpG;	qm[2343]=rpAT*fpT;	qm[2404]=rpAC*fpA;	qm[2406]=rpCG*fpG;	qm[2407]=rpCT*fpT;	qm[2468]=rpAG*fpA;	qm[2469]=rpCG*fpC;	qm[2471]=rpGT*fpT;	qm[2532]=rpAT*fpA;	qm[2533]=rpCT*fpC;	qm[2534]=rpGT*fpG;	if(param[SSRFCodon::fD]->val>0.0)		{		tempx=codF[37]*fpA/(codF[33]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[2401]=rpAC*fpA;		else			qm[2401]=rpAC*fpA*log(1.0/tempx)/(1.0-tempx);		tempx=codF[39]*fpA/(codF[35]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[2531]=rpAC*fpA;		else			qm[2531]=rpAC*fpA*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[2401]=qm[2531]=0.0;		}	if(param[SSRFCodon::fE]->val>0.0)		{		tempx=codF[36]*fpA/(codF[32]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[2336]=rpAC*fpA;		else			qm[2336]=rpAC*fpA*log(1.0/tempx)/(1.0-tempx);		tempx=codF[38]*fpA/(codF[34]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[2466]=rpAC*fpA;		else			qm[2466]=rpAC*fpA*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[2336]=qm[2466]=0.0;		}	if(param[SSRFCodon::fG]->val>0.0)		{		tempx=codF[36]*fpG/(codF[40]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[2344]=rpCG*fpG;		else			qm[2344]=rpCG*fpG*log(1.0/tempx)/(1.0-tempx);		tempx=codF[37]*fpG/(codF[41]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[2409]=rpCG*fpG;		else			qm[2409]=rpCG*fpG*log(1.0/tempx)/(1.0-tempx);		tempx=codF[38]*fpG/(codF[42]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[2474]=rpCG*fpG;		else			qm[2474]=rpCG*fpG*log(1.0/tempx)/(1.0-tempx);		tempx=codF[39]*fpG/(codF[43]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[2539]=rpCG*fpG;		else			qm[2539]=rpCG*fpG*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[2344]=qm[2409]=qm[2474]=qm[2539]=0.0;		}	if(param[SSRFCodon::fP]->val>0.0)		{		tempx=codF[36]*fpC/(codF[20]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[2324]=rpCG*fpC;		else			qm[2324]=rpCG*fpC*log(1.0/tempx)/(1.0-tempx);		tempx=codF[37]*fpC/(codF[21]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[2389]=rpCG*fpC;		else			qm[2389]=rpCG*fpC*log(1.0/tempx)/(1.0-tempx);		tempx=codF[38]*fpC/(codF[22]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[2454]=rpCG*fpC;		else			qm[2454]=rpCG*fpC*log(1.0/tempx)/(1.0-tempx);		tempx=codF[39]*fpC/(codF[23]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[2519]=rpCG*fpC;		else			qm[2519]=rpCG*fpC*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[2324]=qm[2389]=qm[2454]=qm[2519]=0.0;		}	if(param[SSRFCodon::fS]->val>0.0)		{		tempx=codF[36]*fpT/(codF[52]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[2356]=rpGT*fpT;		else			qm[2356]=rpGT*fpT*log(1.0/tempx)/(1.0-tempx);		tempx=codF[37]*fpT/(codF[53]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[2421]=rpGT*fpT;		else			qm[2421]=rpGT*fpT*log(1.0/tempx)/(1.0-tempx);		tempx=codF[38]*fpT/(codF[54]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[2486]=rpGT*fpT;		else			qm[2486]=rpGT*fpT*log(1.0/tempx)/(1.0-tempx);		tempx=codF[39]*fpT/(codF[55]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[2551]=rpGT*fpT;		else			qm[2551]=rpGT*fpT*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[2356]=qm[2421]=qm[2486]=qm[2551]=0.0;		}	if(param[SSRFCodon::fT]->val>0.0)		{		tempx=codF[36]*fpA/(codF[4]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[2308]=rpAG*fpA;		else			qm[2308]=rpAG*fpA*log(1.0/tempx)/(1.0-tempx);		tempx=codF[37]*fpA/(codF[5]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[2373]=rpAG*fpA;		else			qm[2373]=rpAG*fpA*log(1.0/tempx)/(1.0-tempx);		tempx=codF[38]*fpA/(codF[6]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[2438]=rpAG*fpA;		else			qm[2438]=rpAG*fpA*log(1.0/tempx)/(1.0-tempx);		tempx=codF[39]*fpA/(codF[7]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[2503]=rpAG*fpA;		else			qm[2503]=rpAG*fpA*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[2308]=qm[2373]=qm[2438]=qm[2503]=0.0;		}	if(param[SSRFCodon::fV]->val>0.0)		{		tempx=codF[36]*fpT/(codF[44]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[2348]=rpCT*fpT;		else			qm[2348]=rpCT*fpT*log(1.0/tempx)/(1.0-tempx);		tempx=codF[37]*fpT/(codF[45]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[2413]=rpCT*fpT;		else			qm[2413]=rpCT*fpT*log(1.0/tempx)/(1.0-tempx);		tempx=codF[38]*fpT/(codF[46]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[2478]=rpCT*fpT;		else			qm[2478]=rpCT*fpT*log(1.0/tempx)/(1.0-tempx);		tempx=codF[39]*fpT/(codF[47]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[2543]=rpCT*fpT;		else			qm[2543]=rpCT*fpT*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[2348]=qm[2413]=qm[2478]=qm[2543]=0.0;		}	}else	{	qm[2341]=qm[2342]=qm[2343]=qm[2404]=qm[2406]=qm[2407]=qm[2468]=qm[2469]=qm[2471]=qm[2532]=qm[2533]=qm[2534]=qm[2401]=qm[2531]=qm[2336]=qm[2466]=qm[2344]=qm[2409]=qm[2474]=qm[2539]=qm[2324]=qm[2389]=qm[2454]=qm[2519]=qm[2356]=qm[2421]=qm[2486]=qm[2551]=qm[2308]=qm[2373]=qm[2438]=qm[2503]=qm[2348]=qm[2413]=qm[2478]=qm[2543]=0.0;	}if(param[SSRFCodon::fC]->val>0.0)	{	qm[3707]=rpCT*fpT;	qm[3833]=rpCT*fpC;	if(param[SSRFCodon::fF]->val>0.0)		{		tempx=codF[57]*fpT/(codF[61]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3709]=rpGT*fpT;		else			qm[3709]=rpGT*fpT*log(1.0/tempx)/(1.0-tempx);		tempx=codF[59]*fpT/(codF[63]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3839]=rpGT*fpT;		else			qm[3839]=rpGT*fpT*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[3709]=qm[3839]=0.0;		}	if(param[SSRFCodon::fG]->val>0.0)		{		tempx=codF[57]*fpG/(codF[41]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3689]=rpGT*fpG;		else			qm[3689]=rpGT*fpG*log(1.0/tempx)/(1.0-tempx);		tempx=codF[59]*fpG/(codF[43]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3819]=rpGT*fpG;		else			qm[3819]=rpGT*fpG*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[3689]=qm[3819]=0.0;		}	if(param[SSRFCodon::fR]->val>0.0)		{		tempx=codF[57]*fpC/(codF[25]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3673]=rpCT*fpC;		else			qm[3673]=rpCT*fpC*log(1.0/tempx)/(1.0-tempx);		tempx=codF[59]*fpC/(codF[27]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3803]=rpCT*fpC;		else			qm[3803]=rpCT*fpC*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[3673]=qm[3803]=0.0;		}	if(param[SSRFCodon::fS]->val>0.0)		{		tempx=codF[57]*fpA/(codF[9]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3657]=rpAT*fpA;		else			qm[3657]=rpAT*fpA*log(1.0/tempx)/(1.0-tempx);		tempx=codF[57]*fpC/(codF[53]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3701]=rpCG*fpC;		else			qm[3701]=rpCG*fpC*log(1.0/tempx)/(1.0-tempx);		tempx=codF[59]*fpA/(codF[11]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3787]=rpAT*fpA;		else			qm[3787]=rpAT*fpA*log(1.0/tempx)/(1.0-tempx);		tempx=codF[59]*fpC/(codF[55]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3831]=rpCG*fpC;		else			qm[3831]=rpCG*fpC*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[3657]=qm[3701]=qm[3787]=qm[3831]=0.0;		}	if(param[SSRFCodon::fW]->val>0.0)		{		tempx=codF[57]*fpA/(codF[56]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3704]=rpAC*fpA;		else			qm[3704]=rpAC*fpA*log(1.0/tempx)/(1.0-tempx);		tempx=codF[57]*fpG/(codF[58]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3706]=rpCG*fpG;		else			qm[3706]=rpCG*fpG*log(1.0/tempx)/(1.0-tempx);		tempx=codF[59]*fpA/(codF[56]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3832]=rpAT*fpA;		else			qm[3832]=rpAT*fpA*log(1.0/tempx)/(1.0-tempx);		tempx=codF[59]*fpG/(codF[58]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3834]=rpGT*fpG;		else			qm[3834]=rpGT*fpG*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[3704]=qm[3706]=qm[3832]=qm[3834]=0.0;		}	if(param[SSRFCodon::fY]->val>0.0)		{		tempx=codF[57]*fpA/(codF[49]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3697]=rpAG*fpA;		else			qm[3697]=rpAG*fpA*log(1.0/tempx)/(1.0-tempx);		tempx=codF[59]*fpA/(codF[51]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3827]=rpAG*fpA;		else			qm[3827]=rpAG*fpA*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[3697]=qm[3827]=0.0;		}	}else	{	qm[3707]=qm[3833]=qm[3709]=qm[3839]=qm[3689]=qm[3819]=qm[3673]=qm[3803]=qm[3657]=qm[3701]=qm[3787]=qm[3831]=qm[3704]=qm[3706]=qm[3832]=qm[3834]=qm[3697]=qm[3827]=0.0;	}if(param[SSRFCodon::fD]->val>0.0)	{	if(param[SSRFCodon::fA]->val>0.0)		{		tempx=codF[33]*fpC/(codF[37]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[2149]=rpAC*fpC;		else			qm[2149]=rpAC*fpC*log(1.0/tempx)/(1.0-tempx);		tempx=codF[35]*fpC/(codF[39]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[2279]=rpAC*fpC;		else			qm[2279]=rpAC*fpC*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[2149]=qm[2279]=0.0;		}	qm[2147]=rpCT*fpT;	qm[2273]=rpCT*fpC;	if(param[SSRFCodon::fE]->val>0.0)		{		tempx=codF[33]*fpA/(codF[32]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[2144]=rpAC*fpA;		else			qm[2144]=rpAC*fpA*log(1.0/tempx)/(1.0-tempx);		tempx=codF[33]*fpG/(codF[34]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[2146]=rpCG*fpG;		else			qm[2146]=rpCG*fpG*log(1.0/tempx)/(1.0-tempx);		tempx=codF[35]*fpA/(codF[32]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[2272]=rpAT*fpA;		else			qm[2272]=rpAT*fpA*log(1.0/tempx)/(1.0-tempx);		tempx=codF[35]*fpG/(codF[34]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[2274]=rpGT*fpG;		else			qm[2274]=rpGT*fpG*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[2144]=qm[2146]=qm[2272]=qm[2274]=0.0;		}	if(param[SSRFCodon::fG]->val>0.0)		{		tempx=codF[33]*fpG/(codF[41]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[2153]=rpAG*fpG;		else			qm[2153]=rpAG*fpG*log(1.0/tempx)/(1.0-tempx);		tempx=codF[35]*fpG/(codF[43]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[2283]=rpAG*fpG;		else			qm[2283]=rpAG*fpG*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[2153]=qm[2283]=0.0;		}	if(param[SSRFCodon::fH]->val>0.0)		{		tempx=codF[33]*fpC/(codF[17]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[2129]=rpCG*fpC;		else			qm[2129]=rpCG*fpC*log(1.0/tempx)/(1.0-tempx);		tempx=codF[35]*fpC/(codF[19]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[2259]=rpCG*fpC;		else			qm[2259]=rpCG*fpC*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[2129]=qm[2259]=0.0;		}	if(param[SSRFCodon::fN]->val>0.0)		{		tempx=codF[33]*fpA/(codF[1]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[2113]=rpAG*fpA;		else			qm[2113]=rpAG*fpA*log(1.0/tempx)/(1.0-tempx);		tempx=codF[35]*fpA/(codF[3]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[2243]=rpAG*fpA;		else			qm[2243]=rpAG*fpA*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[2113]=qm[2243]=0.0;		}	if(param[SSRFCodon::fV]->val>0.0)		{		tempx=codF[33]*fpT/(codF[45]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[2157]=rpAT*fpT;		else			qm[2157]=rpAT*fpT*log(1.0/tempx)/(1.0-tempx);		tempx=codF[35]*fpT/(codF[47]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[2287]=rpAT*fpT;		else			qm[2287]=rpAT*fpT*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[2157]=qm[2287]=0.0;		}	if(param[SSRFCodon::fY]->val>0.0)		{		tempx=codF[33]*fpT/(codF[49]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[2161]=rpGT*fpT;		else			qm[2161]=rpGT*fpT*log(1.0/tempx)/(1.0-tempx);		tempx=codF[35]*fpT/(codF[51]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[2291]=rpGT*fpT;		else			qm[2291]=rpGT*fpT*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[2161]=qm[2291]=0.0;		}	}else	{	qm[2149]=qm[2279]=qm[2147]=qm[2273]=qm[2144]=qm[2146]=qm[2272]=qm[2274]=qm[2153]=qm[2283]=qm[2129]=qm[2259]=qm[2113]=qm[2243]=qm[2157]=qm[2287]=qm[2161]=qm[2291]=0.0;	}if(param[SSRFCodon::fE]->val>0.0)	{	if(param[SSRFCodon::fA]->val>0.0)		{		tempx=codF[32]*fpC/(codF[36]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[2084]=rpAC*fpC;		else			qm[2084]=rpAC*fpC*log(1.0/tempx)/(1.0-tempx);		tempx=codF[34]*fpC/(codF[38]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[2214]=rpAC*fpC;		else			qm[2214]=rpAC*fpC*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[2084]=qm[2214]=0.0;		}	if(param[SSRFCodon::fD]->val>0.0)		{		tempx=codF[32]*fpC/(codF[33]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[2081]=rpAC*fpC;		else			qm[2081]=rpAC*fpC*log(1.0/tempx)/(1.0-tempx);		tempx=codF[32]*fpT/(codF[35]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[2083]=rpAT*fpT;		else			qm[2083]=rpAT*fpT*log(1.0/tempx)/(1.0-tempx);		tempx=codF[34]*fpC/(codF[33]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[2209]=rpCG*fpC;		else			qm[2209]=rpCG*fpC*log(1.0/tempx)/(1.0-tempx);		tempx=codF[34]*fpT/(codF[35]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[2211]=rpGT*fpT;		else			qm[2211]=rpGT*fpT*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[2081]=qm[2083]=qm[2209]=qm[2211]=0.0;		}	qm[2082]=rpAG*fpG;	qm[2208]=rpAG*fpA;	if(param[SSRFCodon::fG]->val>0.0)		{		tempx=codF[32]*fpG/(codF[40]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[2088]=rpAG*fpG;		else			qm[2088]=rpAG*fpG*log(1.0/tempx)/(1.0-tempx);		tempx=codF[34]*fpG/(codF[42]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[2218]=rpAG*fpG;		else			qm[2218]=rpAG*fpG*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[2088]=qm[2218]=0.0;		}	if(param[SSRFCodon::fK]->val>0.0)		{		tempx=codF[32]*fpA/(codF[0]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[2048]=rpAG*fpA;		else			qm[2048]=rpAG*fpA*log(1.0/tempx)/(1.0-tempx);		tempx=codF[34]*fpA/(codF[2]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[2178]=rpAG*fpA;		else			qm[2178]=rpAG*fpA*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[2048]=qm[2178]=0.0;		}	if(param[SSRFCodon::fQ]->val>0.0)		{		tempx=codF[32]*fpC/(codF[16]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[2064]=rpCG*fpC;		else			qm[2064]=rpCG*fpC*log(1.0/tempx)/(1.0-tempx);		tempx=codF[34]*fpC/(codF[18]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[2194]=rpCG*fpC;		else			qm[2194]=rpCG*fpC*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[2064]=qm[2194]=0.0;		}	if(param[SSRFCodon::fV]->val>0.0)		{		tempx=codF[32]*fpT/(codF[44]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[2092]=rpAT*fpT;		else			qm[2092]=rpAT*fpT*log(1.0/tempx)/(1.0-tempx);		tempx=codF[34]*fpT/(codF[46]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[2222]=rpAT*fpT;		else			qm[2222]=rpAT*fpT*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[2092]=qm[2222]=0.0;		}	if(param[SSRFCodon::fStop]->val>0.0)		{		tempx=codF[32]*fpT/(codF[48]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[2096]=rpGT*fpT;		else			qm[2096]=rpGT*fpT*log(1.0/tempx)/(1.0-tempx);		tempx=codF[34]*fpT/(codF[50]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[2226]=rpGT*fpT;		else			qm[2226]=rpGT*fpT*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[2096]=qm[2226]=0.0;		}	}else	{	qm[2084]=qm[2214]=qm[2081]=qm[2083]=qm[2209]=qm[2211]=qm[2082]=qm[2208]=qm[2088]=qm[2218]=qm[2048]=qm[2178]=qm[2064]=qm[2194]=qm[2092]=qm[2222]=qm[2096]=qm[2226]=0.0;	}if(param[SSRFCodon::fF]->val>0.0)	{	if(param[SSRFCodon::fC]->val>0.0)		{		tempx=codF[61]*fpG/(codF[57]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3961]=rpGT*fpG;		else			qm[3961]=rpGT*fpG*log(1.0/tempx)/(1.0-tempx);		tempx=codF[63]*fpG/(codF[59]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[4091]=rpGT*fpG;		else			qm[4091]=rpGT*fpG*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[3961]=qm[4091]=0.0;		}	qm[3967]=rpCT*fpT;	qm[4093]=rpCT*fpC;	if(param[SSRFCodon::fI]->val>0.0)		{		tempx=codF[61]*fpA/(codF[13]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3917]=rpAT*fpA;		else			qm[3917]=rpAT*fpA*log(1.0/tempx)/(1.0-tempx);		tempx=codF[63]*fpA/(codF[15]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[4047]=rpAT*fpA;		else			qm[4047]=rpAT*fpA*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[3917]=qm[4047]=0.0;		}	if(param[SSRFCodon::fL]->val>0.0)		{		tempx=codF[61]*fpC/(codF[29]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3933]=rpCT*fpC;		else			qm[3933]=rpCT*fpC*log(1.0/tempx)/(1.0-tempx);		tempx=codF[61]*fpA/(codF[60]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3964]=rpAC*fpA;		else			qm[3964]=rpAC*fpA*log(1.0/tempx)/(1.0-tempx);		tempx=codF[61]*fpG/(codF[62]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3966]=rpCG*fpG;		else			qm[3966]=rpCG*fpG*log(1.0/tempx)/(1.0-tempx);		tempx=codF[63]*fpC/(codF[31]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[4063]=rpCT*fpC;		else			qm[4063]=rpCT*fpC*log(1.0/tempx)/(1.0-tempx);		tempx=codF[63]*fpA/(codF[60]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[4092]=rpAT*fpA;		else			qm[4092]=rpAT*fpA*log(1.0/tempx)/(1.0-tempx);		tempx=codF[63]*fpG/(codF[62]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[4094]=rpGT*fpG;		else			qm[4094]=rpGT*fpG*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[3933]=qm[3964]=qm[3966]=qm[4063]=qm[4092]=qm[4094]=0.0;		}	if(param[SSRFCodon::fS]->val>0.0)		{		tempx=codF[61]*fpC/(codF[53]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3957]=rpCT*fpC;		else			qm[3957]=rpCT*fpC*log(1.0/tempx)/(1.0-tempx);		tempx=codF[63]*fpC/(codF[55]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[4087]=rpCT*fpC;		else			qm[4087]=rpCT*fpC*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[3957]=qm[4087]=0.0;		}	if(param[SSRFCodon::fV]->val>0.0)		{		tempx=codF[61]*fpG/(codF[45]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3949]=rpGT*fpG;		else			qm[3949]=rpGT*fpG*log(1.0/tempx)/(1.0-tempx);		tempx=codF[63]*fpG/(codF[47]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[4079]=rpGT*fpG;		else			qm[4079]=rpGT*fpG*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[3949]=qm[4079]=0.0;		}	if(param[SSRFCodon::fY]->val>0.0)		{		tempx=codF[61]*fpA/(codF[49]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3953]=rpAT*fpA;		else			qm[3953]=rpAT*fpA*log(1.0/tempx)/(1.0-tempx);		tempx=codF[63]*fpA/(codF[51]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[4083]=rpAT*fpA;		else			qm[4083]=rpAT*fpA*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[3953]=qm[4083]=0.0;		}	}else	{	qm[3961]=qm[4091]=qm[3967]=qm[4093]=qm[3917]=qm[4047]=qm[3933]=qm[3964]=qm[3966]=qm[4063]=qm[4092]=qm[4094]=qm[3957]=qm[4087]=qm[3949]=qm[4079]=qm[3953]=qm[4083]=0.0;	}if(param[SSRFCodon::fG]->val>0.0)	{	if(param[SSRFCodon::fA]->val>0.0)		{		tempx=codF[40]*fpC/(codF[36]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[2596]=rpCG*fpC;		else			qm[2596]=rpCG*fpC*log(1.0/tempx)/(1.0-tempx);		tempx=codF[41]*fpC/(codF[37]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[2661]=rpCG*fpC;		else			qm[2661]=rpCG*fpC*log(1.0/tempx)/(1.0-tempx);		tempx=codF[42]*fpC/(codF[38]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[2726]=rpCG*fpC;		else			qm[2726]=rpCG*fpC*log(1.0/tempx)/(1.0-tempx);		tempx=codF[43]*fpC/(codF[39]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[2791]=rpCG*fpC;		else			qm[2791]=rpCG*fpC*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[2596]=qm[2661]=qm[2726]=qm[2791]=0.0;		}	if(param[SSRFCodon::fC]->val>0.0)		{		tempx=codF[41]*fpT/(codF[57]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[2681]=rpGT*fpT;		else			qm[2681]=rpGT*fpT*log(1.0/tempx)/(1.0-tempx);		tempx=codF[43]*fpT/(codF[59]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[2811]=rpGT*fpT;		else			qm[2811]=rpGT*fpT*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[2681]=qm[2811]=0.0;		}	if(param[SSRFCodon::fD]->val>0.0)		{		tempx=codF[41]*fpA/(codF[33]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[2657]=rpAG*fpA;		else			qm[2657]=rpAG*fpA*log(1.0/tempx)/(1.0-tempx);		tempx=codF[43]*fpA/(codF[35]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[2787]=rpAG*fpA;		else			qm[2787]=rpAG*fpA*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[2657]=qm[2787]=0.0;		}	if(param[SSRFCodon::fE]->val>0.0)		{		tempx=codF[40]*fpA/(codF[32]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[2592]=rpAG*fpA;		else			qm[2592]=rpAG*fpA*log(1.0/tempx)/(1.0-tempx);		tempx=codF[42]*fpA/(codF[34]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[2722]=rpAG*fpA;		else			qm[2722]=rpAG*fpA*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[2592]=qm[2722]=0.0;		}	qm[2601]=rpAC*fpC;	qm[2602]=rpAG*fpG;	qm[2603]=rpAT*fpT;	qm[2664]=rpAC*fpA;	qm[2666]=rpCG*fpG;	qm[2667]=rpCT*fpT;	qm[2728]=rpAG*fpA;	qm[2729]=rpCG*fpC;	qm[2731]=rpGT*fpT;	qm[2792]=rpAT*fpA;	qm[2793]=rpCT*fpC;	qm[2794]=rpGT*fpG;	if(param[SSRFCodon::fR]->val>0.0)		{		tempx=codF[40]*fpC/(codF[24]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[2584]=rpCG*fpC;		else			qm[2584]=rpCG*fpC*log(1.0/tempx)/(1.0-tempx);		tempx=codF[41]*fpC/(codF[25]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[2649]=rpCG*fpC;		else			qm[2649]=rpCG*fpC*log(1.0/tempx)/(1.0-tempx);		tempx=codF[42]*fpC/(codF[26]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[2714]=rpCG*fpC;		else			qm[2714]=rpCG*fpC*log(1.0/tempx)/(1.0-tempx);		tempx=codF[43]*fpC/(codF[27]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[2779]=rpCG*fpC;		else			qm[2779]=rpCG*fpC*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[2584]=qm[2649]=qm[2714]=qm[2779]=0.0;		}	if(param[SSRFCodon::fS]->val>0.0)		{		tempx=codF[41]*fpA/(codF[9]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[2633]=rpAG*fpA;		else			qm[2633]=rpAG*fpA*log(1.0/tempx)/(1.0-tempx);		tempx=codF[43]*fpA/(codF[11]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[2763]=rpAG*fpA;		else			qm[2763]=rpAG*fpA*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[2633]=qm[2763]=0.0;		}	if(param[SSRFCodon::fV]->val>0.0)		{		tempx=codF[40]*fpT/(codF[44]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[2604]=rpGT*fpT;		else			qm[2604]=rpGT*fpT*log(1.0/tempx)/(1.0-tempx);		tempx=codF[41]*fpT/(codF[45]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[2669]=rpGT*fpT;		else			qm[2669]=rpGT*fpT*log(1.0/tempx)/(1.0-tempx);		tempx=codF[42]*fpT/(codF[46]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[2734]=rpGT*fpT;		else			qm[2734]=rpGT*fpT*log(1.0/tempx)/(1.0-tempx);		tempx=codF[43]*fpT/(codF[47]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[2799]=rpGT*fpT;		else			qm[2799]=rpGT*fpT*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[2604]=qm[2669]=qm[2734]=qm[2799]=0.0;		}	if(param[SSRFCodon::fW]->val>0.0)		{		tempx=codF[40]*fpT/(codF[56]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[2616]=rpGT*fpT;		else			qm[2616]=rpGT*fpT*log(1.0/tempx)/(1.0-tempx);		tempx=codF[42]*fpT/(codF[58]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[2746]=rpGT*fpT;		else			qm[2746]=rpGT*fpT*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[2616]=qm[2746]=0.0;		}	if(param[SSRFCodon::fStop]->val>0.0)		{		tempx=codF[40]*fpA/(codF[8]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[2568]=rpAG*fpA;		else			qm[2568]=rpAG*fpA*log(1.0/tempx)/(1.0-tempx);		tempx=codF[42]*fpA/(codF[10]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[2698]=rpAG*fpA;		else			qm[2698]=rpAG*fpA*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[2568]=qm[2698]=0.0;		}	}else	{	qm[2596]=qm[2661]=qm[2726]=qm[2791]=qm[2681]=qm[2811]=qm[2657]=qm[2787]=qm[2592]=qm[2722]=qm[2601]=qm[2602]=qm[2603]=qm[2664]=qm[2666]=qm[2667]=qm[2728]=qm[2729]=qm[2731]=qm[2792]=qm[2793]=qm[2794]=qm[2584]=qm[2649]=qm[2714]=qm[2779]=qm[2633]=qm[2763]=qm[2604]=qm[2669]=qm[2734]=qm[2799]=qm[2616]=qm[2746]=qm[2568]=qm[2698]=0.0;	}if(param[SSRFCodon::fH]->val>0.0)	{	if(param[SSRFCodon::fD]->val>0.0)		{		tempx=codF[17]*fpG/(codF[33]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[1121]=rpCG*fpG;		else			qm[1121]=rpCG*fpG*log(1.0/tempx)/(1.0-tempx);		tempx=codF[19]*fpG/(codF[35]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[1251]=rpCG*fpG;		else			qm[1251]=rpCG*fpG*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[1121]=qm[1251]=0.0;		}	qm[1107]=rpCT*fpT;	qm[1233]=rpCT*fpC;	if(param[SSRFCodon::fL]->val>0.0)		{		tempx=codF[17]*fpT/(codF[29]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[1117]=rpAT*fpT;		else			qm[1117]=rpAT*fpT*log(1.0/tempx)/(1.0-tempx);		tempx=codF[19]*fpT/(codF[31]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[1247]=rpAT*fpT;		else			qm[1247]=rpAT*fpT*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[1117]=qm[1247]=0.0;		}	if(param[SSRFCodon::fN]->val>0.0)		{		tempx=codF[17]*fpA/(codF[1]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[1089]=rpAC*fpA;		else			qm[1089]=rpAC*fpA*log(1.0/tempx)/(1.0-tempx);		tempx=codF[19]*fpA/(codF[3]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[1219]=rpAC*fpA;		else			qm[1219]=rpAC*fpA*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[1089]=qm[1219]=0.0;		}	if(param[SSRFCodon::fP]->val>0.0)		{		tempx=codF[17]*fpC/(codF[21]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[1109]=rpAC*fpC;		else			qm[1109]=rpAC*fpC*log(1.0/tempx)/(1.0-tempx);		tempx=codF[19]*fpC/(codF[23]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[1239]=rpAC*fpC;		else			qm[1239]=rpAC*fpC*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[1109]=qm[1239]=0.0;		}	if(param[SSRFCodon::fQ]->val>0.0)		{		tempx=codF[17]*fpA/(codF[16]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[1104]=rpAC*fpA;		else			qm[1104]=rpAC*fpA*log(1.0/tempx)/(1.0-tempx);		tempx=codF[17]*fpG/(codF[18]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[1106]=rpCG*fpG;		else			qm[1106]=rpCG*fpG*log(1.0/tempx)/(1.0-tempx);		tempx=codF[19]*fpA/(codF[16]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[1232]=rpAT*fpA;		else			qm[1232]=rpAT*fpA*log(1.0/tempx)/(1.0-tempx);		tempx=codF[19]*fpG/(codF[18]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[1234]=rpGT*fpG;		else			qm[1234]=rpGT*fpG*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[1104]=qm[1106]=qm[1232]=qm[1234]=0.0;		}	if(param[SSRFCodon::fR]->val>0.0)		{		tempx=codF[17]*fpG/(codF[25]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[1113]=rpAG*fpG;		else			qm[1113]=rpAG*fpG*log(1.0/tempx)/(1.0-tempx);		tempx=codF[19]*fpG/(codF[27]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[1243]=rpAG*fpG;		else			qm[1243]=rpAG*fpG*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[1113]=qm[1243]=0.0;		}	if(param[SSRFCodon::fY]->val>0.0)		{		tempx=codF[17]*fpT/(codF[49]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[1137]=rpCT*fpT;		else			qm[1137]=rpCT*fpT*log(1.0/tempx)/(1.0-tempx);		tempx=codF[19]*fpT/(codF[51]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[1267]=rpCT*fpT;		else			qm[1267]=rpCT*fpT*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[1137]=qm[1267]=0.0;		}	}else	{	qm[1121]=qm[1251]=qm[1107]=qm[1233]=qm[1117]=qm[1247]=qm[1089]=qm[1219]=qm[1109]=qm[1239]=qm[1104]=qm[1106]=qm[1232]=qm[1234]=qm[1113]=qm[1243]=qm[1137]=qm[1267]=0.0;	}if(param[SSRFCodon::fI]->val>0.0)	{	if(param[SSRFCodon::fF]->val>0.0)		{		tempx=codF[13]*fpT/(codF[61]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[893]=rpAT*fpT;		else			qm[893]=rpAT*fpT*log(1.0/tempx)/(1.0-tempx);		tempx=codF[15]*fpT/(codF[63]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[1023]=rpAT*fpT;		else			qm[1023]=rpAT*fpT*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[893]=qm[1023]=0.0;		}	qm[847]=rpCT*fpT;	qm[973]=rpCT*fpC;	if(param[SSRFCodon::fL]->val>0.0)		{		tempx=codF[13]*fpC/(codF[29]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[861]=rpAC*fpC;		else			qm[861]=rpAC*fpC*log(1.0/tempx)/(1.0-tempx);		tempx=codF[15]*fpC/(codF[31]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[991]=rpAC*fpC;		else			qm[991]=rpAC*fpC*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[861]=qm[991]=0.0;		}	if(param[SSRFCodon::fM]->val>0.0)		{		tempx=codF[13]*fpA/(codF[12]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[844]=rpAC*fpA;		else			qm[844]=rpAC*fpA*log(1.0/tempx)/(1.0-tempx);		tempx=codF[13]*fpG/(codF[14]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[846]=rpCG*fpG;		else			qm[846]=rpCG*fpG*log(1.0/tempx)/(1.0-tempx);		tempx=codF[15]*fpA/(codF[12]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[972]=rpAT*fpA;		else			qm[972]=rpAT*fpA*log(1.0/tempx)/(1.0-tempx);		tempx=codF[15]*fpG/(codF[14]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[974]=rpGT*fpG;		else			qm[974]=rpGT*fpG*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[844]=qm[846]=qm[972]=qm[974]=0.0;		}	if(param[SSRFCodon::fN]->val>0.0)		{		tempx=codF[13]*fpA/(codF[1]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[833]=rpAT*fpA;		else			qm[833]=rpAT*fpA*log(1.0/tempx)/(1.0-tempx);		tempx=codF[15]*fpA/(codF[3]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[963]=rpAT*fpA;		else			qm[963]=rpAT*fpA*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[833]=qm[963]=0.0;		}	if(param[SSRFCodon::fS]->val>0.0)		{		tempx=codF[13]*fpG/(codF[9]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[841]=rpGT*fpG;		else			qm[841]=rpGT*fpG*log(1.0/tempx)/(1.0-tempx);		tempx=codF[15]*fpG/(codF[11]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[971]=rpGT*fpG;		else			qm[971]=rpGT*fpG*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[841]=qm[971]=0.0;		}	if(param[SSRFCodon::fT]->val>0.0)		{		tempx=codF[13]*fpC/(codF[5]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[837]=rpCT*fpC;		else			qm[837]=rpCT*fpC*log(1.0/tempx)/(1.0-tempx);		tempx=codF[15]*fpC/(codF[7]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[967]=rpCT*fpC;		else			qm[967]=rpCT*fpC*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[837]=qm[967]=0.0;		}	if(param[SSRFCodon::fV]->val>0.0)		{		tempx=codF[13]*fpG/(codF[45]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[877]=rpAG*fpG;		else			qm[877]=rpAG*fpG*log(1.0/tempx)/(1.0-tempx);		tempx=codF[15]*fpG/(codF[47]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[1007]=rpAG*fpG;		else			qm[1007]=rpAG*fpG*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[877]=qm[1007]=0.0;		}	}else	{	qm[893]=qm[1023]=qm[847]=qm[973]=qm[861]=qm[991]=qm[844]=qm[846]=qm[972]=qm[974]=qm[833]=qm[963]=qm[841]=qm[971]=qm[837]=qm[967]=qm[877]=qm[1007]=0.0;	}if(param[SSRFCodon::fK]->val>0.0)	{	if(param[SSRFCodon::fE]->val>0.0)		{		tempx=codF[0]*fpG/(codF[32]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[32]=rpAG*fpG;		else			qm[32]=rpAG*fpG*log(1.0/tempx)/(1.0-tempx);		tempx=codF[2]*fpG/(codF[34]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[162]=rpAG*fpG;		else			qm[162]=rpAG*fpG*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[32]=qm[162]=0.0;		}	qm[2]=rpAG*fpG;	qm[128]=rpAG*fpA;	if(param[SSRFCodon::fM]->val>0.0)		{		tempx=codF[0]*fpT/(codF[12]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[12]=rpAT*fpT;		else			qm[12]=rpAT*fpT*log(1.0/tempx)/(1.0-tempx);		tempx=codF[2]*fpT/(codF[14]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[142]=rpAT*fpT;		else			qm[142]=rpAT*fpT*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[12]=qm[142]=0.0;		}	if(param[SSRFCodon::fN]->val>0.0)		{		tempx=codF[0]*fpC/(codF[1]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[1]=rpAC*fpC;		else			qm[1]=rpAC*fpC*log(1.0/tempx)/(1.0-tempx);		tempx=codF[0]*fpT/(codF[3]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3]=rpAT*fpT;		else			qm[3]=rpAT*fpT*log(1.0/tempx)/(1.0-tempx);		tempx=codF[2]*fpC/(codF[1]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[129]=rpCG*fpC;		else			qm[129]=rpCG*fpC*log(1.0/tempx)/(1.0-tempx);		tempx=codF[2]*fpT/(codF[3]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[131]=rpGT*fpT;		else			qm[131]=rpGT*fpT*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[1]=qm[3]=qm[129]=qm[131]=0.0;		}	if(param[SSRFCodon::fQ]->val>0.0)		{		tempx=codF[0]*fpC/(codF[16]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[16]=rpAC*fpC;		else			qm[16]=rpAC*fpC*log(1.0/tempx)/(1.0-tempx);		tempx=codF[2]*fpC/(codF[18]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[146]=rpAC*fpC;		else			qm[146]=rpAC*fpC*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[16]=qm[146]=0.0;		}	if(param[SSRFCodon::fT]->val>0.0)		{		tempx=codF[0]*fpC/(codF[4]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[4]=rpAC*fpC;		else			qm[4]=rpAC*fpC*log(1.0/tempx)/(1.0-tempx);		tempx=codF[2]*fpC/(codF[6]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[134]=rpAC*fpC;		else			qm[134]=rpAC*fpC*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[4]=qm[134]=0.0;		}	if(param[SSRFCodon::fStop]->val>0.0)		{		tempx=codF[0]*fpG/(codF[8]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[8]=rpAG*fpG;		else			qm[8]=rpAG*fpG*log(1.0/tempx)/(1.0-tempx);		tempx=codF[0]*fpT/(codF[48]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[48]=rpAT*fpT;		else			qm[48]=rpAT*fpT*log(1.0/tempx)/(1.0-tempx);		tempx=codF[2]*fpG/(codF[10]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[138]=rpAG*fpG;		else			qm[138]=rpAG*fpG*log(1.0/tempx)/(1.0-tempx);		tempx=codF[2]*fpT/(codF[50]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[178]=rpAT*fpT;		else			qm[178]=rpAT*fpT*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[8]=qm[48]=qm[138]=qm[178]=0.0;		}	}else	{	qm[32]=qm[162]=qm[2]=qm[128]=qm[12]=qm[142]=qm[1]=qm[3]=qm[129]=qm[131]=qm[16]=qm[146]=qm[4]=qm[134]=qm[8]=qm[48]=qm[138]=qm[178]=0.0;	}if(param[SSRFCodon::fL]->val>0.0)	{	if(param[SSRFCodon::fF]->val>0.0)		{		tempx=codF[29]*fpT/(codF[61]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[1917]=rpCT*fpT;		else			qm[1917]=rpCT*fpT*log(1.0/tempx)/(1.0-tempx);		tempx=codF[31]*fpT/(codF[63]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[2047]=rpCT*fpT;		else			qm[2047]=rpCT*fpT*log(1.0/tempx)/(1.0-tempx);		tempx=codF[60]*fpC/(codF[61]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3901]=rpAC*fpC;		else			qm[3901]=rpAC*fpC*log(1.0/tempx)/(1.0-tempx);		tempx=codF[60]*fpT/(codF[63]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3903]=rpAT*fpT;		else			qm[3903]=rpAT*fpT*log(1.0/tempx)/(1.0-tempx);		tempx=codF[62]*fpC/(codF[61]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[4029]=rpCG*fpC;		else			qm[4029]=rpCG*fpC*log(1.0/tempx)/(1.0-tempx);		tempx=codF[62]*fpT/(codF[63]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[4031]=rpGT*fpT;		else			qm[4031]=rpGT*fpT*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[1917]=qm[2047]=qm[3901]=qm[3903]=qm[4029]=qm[4031]=0.0;		}	if(param[SSRFCodon::fH]->val>0.0)		{		tempx=codF[29]*fpA/(codF[17]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[1873]=rpAT*fpA;		else			qm[1873]=rpAT*fpA*log(1.0/tempx)/(1.0-tempx);		tempx=codF[31]*fpA/(codF[19]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[2003]=rpAT*fpA;		else			qm[2003]=rpAT*fpA*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[1873]=qm[2003]=0.0;		}	if(param[SSRFCodon::fI]->val>0.0)		{		tempx=codF[29]*fpA/(codF[13]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[1869]=rpAC*fpA;		else			qm[1869]=rpAC*fpA*log(1.0/tempx)/(1.0-tempx);		tempx=codF[31]*fpA/(codF[15]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[1999]=rpAC*fpA;		else			qm[1999]=rpAC*fpA*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[1869]=qm[1999]=0.0;		}	qm[1821]=rpAC*fpC;	qm[1822]=rpAG*fpG;	qm[1823]=rpAT*fpT;	qm[1852]=rpCT*fpT;	qm[1884]=rpAC*fpA;	qm[1886]=rpCG*fpG;	qm[1887]=rpCT*fpT;	qm[1948]=rpAG*fpA;	qm[1949]=rpCG*fpC;	qm[1951]=rpGT*fpT;	qm[1982]=rpCT*fpT;	qm[2012]=rpAT*fpA;	qm[2013]=rpCT*fpC;	qm[2014]=rpGT*fpG;	qm[3868]=rpCT*fpC;	qm[3902]=rpAG*fpG;	qm[3998]=rpCT*fpC;	qm[4028]=rpAG*fpA;	if(param[SSRFCodon::fM]->val>0.0)		{		tempx=codF[28]*fpA/(codF[12]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[1804]=rpAC*fpA;		else			qm[1804]=rpAC*fpA*log(1.0/tempx)/(1.0-tempx);		tempx=codF[30]*fpA/(codF[14]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[1934]=rpAC*fpA;		else			qm[1934]=rpAC*fpA*log(1.0/tempx)/(1.0-tempx);		tempx=codF[60]*fpA/(codF[12]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3852]=rpAT*fpA;		else			qm[3852]=rpAT*fpA*log(1.0/tempx)/(1.0-tempx);		tempx=codF[62]*fpA/(codF[14]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3982]=rpAT*fpA;		else			qm[3982]=rpAT*fpA*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[1804]=qm[1934]=qm[3852]=qm[3982]=0.0;		}	if(param[SSRFCodon::fP]->val>0.0)		{		tempx=codF[28]*fpC/(codF[20]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[1812]=rpCT*fpC;		else			qm[1812]=rpCT*fpC*log(1.0/tempx)/(1.0-tempx);		tempx=codF[29]*fpC/(codF[21]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[1877]=rpCT*fpC;		else			qm[1877]=rpCT*fpC*log(1.0/tempx)/(1.0-tempx);		tempx=codF[30]*fpC/(codF[22]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[1942]=rpCT*fpC;		else			qm[1942]=rpCT*fpC*log(1.0/tempx)/(1.0-tempx);		tempx=codF[31]*fpC/(codF[23]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[2007]=rpCT*fpC;		else			qm[2007]=rpCT*fpC*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[1812]=qm[1877]=qm[1942]=qm[2007]=0.0;		}	if(param[SSRFCodon::fQ]->val>0.0)		{		tempx=codF[28]*fpA/(codF[16]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[1808]=rpAT*fpA;		else			qm[1808]=rpAT*fpA*log(1.0/tempx)/(1.0-tempx);		tempx=codF[30]*fpA/(codF[18]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[1938]=rpAT*fpA;		else			qm[1938]=rpAT*fpA*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[1808]=qm[1938]=0.0;		}	if(param[SSRFCodon::fR]->val>0.0)		{		tempx=codF[28]*fpG/(codF[24]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[1816]=rpGT*fpG;		else			qm[1816]=rpGT*fpG*log(1.0/tempx)/(1.0-tempx);		tempx=codF[29]*fpG/(codF[25]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[1881]=rpGT*fpG;		else			qm[1881]=rpGT*fpG*log(1.0/tempx)/(1.0-tempx);		tempx=codF[30]*fpG/(codF[26]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[1946]=rpGT*fpG;		else			qm[1946]=rpGT*fpG*log(1.0/tempx)/(1.0-tempx);		tempx=codF[31]*fpG/(codF[27]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[2011]=rpGT*fpG;		else			qm[2011]=rpGT*fpG*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[1816]=qm[1881]=qm[1946]=qm[2011]=0.0;		}	if(param[SSRFCodon::fS]->val>0.0)		{		tempx=codF[60]*fpC/(codF[52]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3892]=rpCT*fpC;		else			qm[3892]=rpCT*fpC*log(1.0/tempx)/(1.0-tempx);		tempx=codF[62]*fpC/(codF[54]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[4022]=rpCT*fpC;		else			qm[4022]=rpCT*fpC*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[3892]=qm[4022]=0.0;		}	if(param[SSRFCodon::fV]->val>0.0)		{		tempx=codF[28]*fpG/(codF[44]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[1836]=rpCG*fpG;		else			qm[1836]=rpCG*fpG*log(1.0/tempx)/(1.0-tempx);		tempx=codF[29]*fpG/(codF[45]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[1901]=rpCG*fpG;		else			qm[1901]=rpCG*fpG*log(1.0/tempx)/(1.0-tempx);		tempx=codF[30]*fpG/(codF[46]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[1966]=rpCG*fpG;		else			qm[1966]=rpCG*fpG*log(1.0/tempx)/(1.0-tempx);		tempx=codF[31]*fpG/(codF[47]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[2031]=rpCG*fpG;		else			qm[2031]=rpCG*fpG*log(1.0/tempx)/(1.0-tempx);		tempx=codF[60]*fpG/(codF[44]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3884]=rpGT*fpG;		else			qm[3884]=rpGT*fpG*log(1.0/tempx)/(1.0-tempx);		tempx=codF[62]*fpG/(codF[46]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[4014]=rpGT*fpG;		else			qm[4014]=rpGT*fpG*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[1836]=qm[1901]=qm[1966]=qm[2031]=qm[3884]=qm[4014]=0.0;		}	if(param[SSRFCodon::fW]->val>0.0)		{		tempx=codF[60]*fpG/(codF[56]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3896]=rpGT*fpG;		else			qm[3896]=rpGT*fpG*log(1.0/tempx)/(1.0-tempx);		tempx=codF[62]*fpG/(codF[58]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[4026]=rpGT*fpG;		else			qm[4026]=rpGT*fpG*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[3896]=qm[4026]=0.0;		}	if(param[SSRFCodon::fStop]->val>0.0)		{		tempx=codF[60]*fpA/(codF[48]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3888]=rpAT*fpA;		else			qm[3888]=rpAT*fpA*log(1.0/tempx)/(1.0-tempx);		tempx=codF[62]*fpA/(codF[50]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[4018]=rpAT*fpA;		else			qm[4018]=rpAT*fpA*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[3888]=qm[4018]=0.0;		}	}else	{	qm[1917]=qm[2047]=qm[3901]=qm[3903]=qm[4029]=qm[4031]=qm[1873]=qm[2003]=qm[1869]=qm[1999]=qm[1821]=qm[1822]=qm[1823]=qm[1852]=qm[1884]=qm[1886]=qm[1887]=qm[1948]=qm[1949]=qm[1951]=qm[1982]=qm[2012]=qm[2013]=qm[2014]=qm[3868]=qm[3902]=qm[3998]=qm[4028]=qm[1804]=qm[1934]=qm[3852]=qm[3982]=qm[1812]=qm[1877]=qm[1942]=qm[2007]=qm[1808]=qm[1938]=qm[1816]=qm[1881]=qm[1946]=qm[2011]=qm[3892]=qm[4022]=qm[1836]=qm[1901]=qm[1966]=qm[2031]=qm[3884]=qm[4014]=qm[3896]=qm[4026]=qm[3888]=qm[4018]=0.0;	}if(param[SSRFCodon::fM]->val>0.0)	{	if(param[SSRFCodon::fI]->val>0.0)		{		tempx=codF[12]*fpC/(codF[13]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[781]=rpAC*fpC;		else			qm[781]=rpAC*fpC*log(1.0/tempx)/(1.0-tempx);		tempx=codF[12]*fpT/(codF[15]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[783]=rpAT*fpT;		else			qm[783]=rpAT*fpT*log(1.0/tempx)/(1.0-tempx);		tempx=codF[14]*fpC/(codF[13]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[909]=rpCG*fpC;		else			qm[909]=rpCG*fpC*log(1.0/tempx)/(1.0-tempx);		tempx=codF[14]*fpT/(codF[15]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[911]=rpGT*fpT;		else			qm[911]=rpGT*fpT*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[781]=qm[783]=qm[909]=qm[911]=0.0;		}	if(param[SSRFCodon::fK]->val>0.0)		{		tempx=codF[12]*fpA/(codF[0]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[768]=rpAT*fpA;		else			qm[768]=rpAT*fpA*log(1.0/tempx)/(1.0-tempx);		tempx=codF[14]*fpA/(codF[2]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[898]=rpAT*fpA;		else			qm[898]=rpAT*fpA*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[768]=qm[898]=0.0;		}	if(param[SSRFCodon::fL]->val>0.0)		{		tempx=codF[12]*fpC/(codF[28]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[796]=rpAC*fpC;		else			qm[796]=rpAC*fpC*log(1.0/tempx)/(1.0-tempx);		tempx=codF[12]*fpT/(codF[60]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[828]=rpAT*fpT;		else			qm[828]=rpAT*fpT*log(1.0/tempx)/(1.0-tempx);		tempx=codF[14]*fpC/(codF[30]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[926]=rpAC*fpC;		else			qm[926]=rpAC*fpC*log(1.0/tempx)/(1.0-tempx);		tempx=codF[14]*fpT/(codF[62]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[958]=rpAT*fpT;		else			qm[958]=rpAT*fpT*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[796]=qm[828]=qm[926]=qm[958]=0.0;		}	qm[782]=rpAG*fpG;	qm[908]=rpAG*fpA;	if(param[SSRFCodon::fT]->val>0.0)		{		tempx=codF[12]*fpC/(codF[4]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[772]=rpCT*fpC;		else			qm[772]=rpCT*fpC*log(1.0/tempx)/(1.0-tempx);		tempx=codF[14]*fpC/(codF[6]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[902]=rpCT*fpC;		else			qm[902]=rpCT*fpC*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[772]=qm[902]=0.0;		}	if(param[SSRFCodon::fV]->val>0.0)		{		tempx=codF[12]*fpG/(codF[44]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[812]=rpAG*fpG;		else			qm[812]=rpAG*fpG*log(1.0/tempx)/(1.0-tempx);		tempx=codF[14]*fpG/(codF[46]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[942]=rpAG*fpG;		else			qm[942]=rpAG*fpG*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[812]=qm[942]=0.0;		}	if(param[SSRFCodon::fStop]->val>0.0)		{		tempx=codF[12]*fpG/(codF[8]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[776]=rpGT*fpG;		else			qm[776]=rpGT*fpG*log(1.0/tempx)/(1.0-tempx);		tempx=codF[14]*fpG/(codF[10]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[906]=rpGT*fpG;		else			qm[906]=rpGT*fpG*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[776]=qm[906]=0.0;		}	}else	{	qm[781]=qm[783]=qm[909]=qm[911]=qm[768]=qm[898]=qm[796]=qm[828]=qm[926]=qm[958]=qm[782]=qm[908]=qm[772]=qm[902]=qm[812]=qm[942]=qm[776]=qm[906]=0.0;	}if(param[SSRFCodon::fN]->val>0.0)	{	if(param[SSRFCodon::fD]->val>0.0)		{		tempx=codF[1]*fpG/(codF[33]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[97]=rpAG*fpG;		else			qm[97]=rpAG*fpG*log(1.0/tempx)/(1.0-tempx);		tempx=codF[3]*fpG/(codF[35]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[227]=rpAG*fpG;		else			qm[227]=rpAG*fpG*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[97]=qm[227]=0.0;		}	if(param[SSRFCodon::fH]->val>0.0)		{		tempx=codF[1]*fpC/(codF[17]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[81]=rpAC*fpC;		else			qm[81]=rpAC*fpC*log(1.0/tempx)/(1.0-tempx);		tempx=codF[3]*fpC/(codF[19]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[211]=rpAC*fpC;		else			qm[211]=rpAC*fpC*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[81]=qm[211]=0.0;		}	if(param[SSRFCodon::fI]->val>0.0)		{		tempx=codF[1]*fpT/(codF[13]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[77]=rpAT*fpT;		else			qm[77]=rpAT*fpT*log(1.0/tempx)/(1.0-tempx);		tempx=codF[3]*fpT/(codF[15]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[207]=rpAT*fpT;		else			qm[207]=rpAT*fpT*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[77]=qm[207]=0.0;		}	if(param[SSRFCodon::fK]->val>0.0)		{		tempx=codF[1]*fpA/(codF[0]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[64]=rpAC*fpA;		else			qm[64]=rpAC*fpA*log(1.0/tempx)/(1.0-tempx);		tempx=codF[1]*fpG/(codF[2]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[66]=rpCG*fpG;		else			qm[66]=rpCG*fpG*log(1.0/tempx)/(1.0-tempx);		tempx=codF[3]*fpA/(codF[0]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[192]=rpAT*fpA;		else			qm[192]=rpAT*fpA*log(1.0/tempx)/(1.0-tempx);		tempx=codF[3]*fpG/(codF[2]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[194]=rpGT*fpG;		else			qm[194]=rpGT*fpG*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[64]=qm[66]=qm[192]=qm[194]=0.0;		}	qm[67]=rpCT*fpT;	qm[193]=rpCT*fpC;	if(param[SSRFCodon::fS]->val>0.0)		{		tempx=codF[1]*fpG/(codF[9]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[73]=rpAG*fpG;		else			qm[73]=rpAG*fpG*log(1.0/tempx)/(1.0-tempx);		tempx=codF[3]*fpG/(codF[11]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[203]=rpAG*fpG;		else			qm[203]=rpAG*fpG*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[73]=qm[203]=0.0;		}	if(param[SSRFCodon::fT]->val>0.0)		{		tempx=codF[1]*fpC/(codF[5]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[69]=rpAC*fpC;		else			qm[69]=rpAC*fpC*log(1.0/tempx)/(1.0-tempx);		tempx=codF[3]*fpC/(codF[7]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[199]=rpAC*fpC;		else			qm[199]=rpAC*fpC*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[69]=qm[199]=0.0;		}	if(param[SSRFCodon::fY]->val>0.0)		{		tempx=codF[1]*fpT/(codF[49]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[113]=rpAT*fpT;		else			qm[113]=rpAT*fpT*log(1.0/tempx)/(1.0-tempx);		tempx=codF[3]*fpT/(codF[51]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[243]=rpAT*fpT;		else			qm[243]=rpAT*fpT*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[113]=qm[243]=0.0;		}	}else	{	qm[97]=qm[227]=qm[81]=qm[211]=qm[77]=qm[207]=qm[64]=qm[66]=qm[192]=qm[194]=qm[67]=qm[193]=qm[73]=qm[203]=qm[69]=qm[199]=qm[113]=qm[243]=0.0;	}if(param[SSRFCodon::fP]->val>0.0)	{	if(param[SSRFCodon::fA]->val>0.0)		{		tempx=codF[20]*fpG/(codF[36]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[1316]=rpCG*fpG;		else			qm[1316]=rpCG*fpG*log(1.0/tempx)/(1.0-tempx);		tempx=codF[21]*fpG/(codF[37]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[1381]=rpCG*fpG;		else			qm[1381]=rpCG*fpG*log(1.0/tempx)/(1.0-tempx);		tempx=codF[22]*fpG/(codF[38]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[1446]=rpCG*fpG;		else			qm[1446]=rpCG*fpG*log(1.0/tempx)/(1.0-tempx);		tempx=codF[23]*fpG/(codF[39]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[1511]=rpCG*fpG;		else			qm[1511]=rpCG*fpG*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[1316]=qm[1381]=qm[1446]=qm[1511]=0.0;		}	if(param[SSRFCodon::fH]->val>0.0)		{		tempx=codF[21]*fpA/(codF[17]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[1361]=rpAC*fpA;		else			qm[1361]=rpAC*fpA*log(1.0/tempx)/(1.0-tempx);		tempx=codF[23]*fpA/(codF[19]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[1491]=rpAC*fpA;		else			qm[1491]=rpAC*fpA*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[1361]=qm[1491]=0.0;		}	if(param[SSRFCodon::fL]->val>0.0)		{		tempx=codF[20]*fpT/(codF[28]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[1308]=rpCT*fpT;		else			qm[1308]=rpCT*fpT*log(1.0/tempx)/(1.0-tempx);		tempx=codF[21]*fpT/(codF[29]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[1373]=rpCT*fpT;		else			qm[1373]=rpCT*fpT*log(1.0/tempx)/(1.0-tempx);		tempx=codF[22]*fpT/(codF[30]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[1438]=rpCT*fpT;		else			qm[1438]=rpCT*fpT*log(1.0/tempx)/(1.0-tempx);		tempx=codF[23]*fpT/(codF[31]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[1503]=rpCT*fpT;		else			qm[1503]=rpCT*fpT*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[1308]=qm[1373]=qm[1438]=qm[1503]=0.0;		}	qm[1301]=rpAC*fpC;	qm[1302]=rpAG*fpG;	qm[1303]=rpAT*fpT;	qm[1364]=rpAC*fpA;	qm[1366]=rpCG*fpG;	qm[1367]=rpCT*fpT;	qm[1428]=rpAG*fpA;	qm[1429]=rpCG*fpC;	qm[1431]=rpGT*fpT;	qm[1492]=rpAT*fpA;	qm[1493]=rpCT*fpC;	qm[1494]=rpGT*fpG;	if(param[SSRFCodon::fQ]->val>0.0)		{		tempx=codF[20]*fpA/(codF[16]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[1296]=rpAC*fpA;		else			qm[1296]=rpAC*fpA*log(1.0/tempx)/(1.0-tempx);		tempx=codF[22]*fpA/(codF[18]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[1426]=rpAC*fpA;		else			qm[1426]=rpAC*fpA*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[1296]=qm[1426]=0.0;		}	if(param[SSRFCodon::fR]->val>0.0)		{		tempx=codF[20]*fpG/(codF[24]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[1304]=rpCG*fpG;		else			qm[1304]=rpCG*fpG*log(1.0/tempx)/(1.0-tempx);		tempx=codF[21]*fpG/(codF[25]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[1369]=rpCG*fpG;		else			qm[1369]=rpCG*fpG*log(1.0/tempx)/(1.0-tempx);		tempx=codF[22]*fpG/(codF[26]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[1434]=rpCG*fpG;		else			qm[1434]=rpCG*fpG*log(1.0/tempx)/(1.0-tempx);		tempx=codF[23]*fpG/(codF[27]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[1499]=rpCG*fpG;		else			qm[1499]=rpCG*fpG*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[1304]=qm[1369]=qm[1434]=qm[1499]=0.0;		}	if(param[SSRFCodon::fS]->val>0.0)		{		tempx=codF[20]*fpT/(codF[52]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[1332]=rpCT*fpT;		else			qm[1332]=rpCT*fpT*log(1.0/tempx)/(1.0-tempx);		tempx=codF[21]*fpT/(codF[53]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[1397]=rpCT*fpT;		else			qm[1397]=rpCT*fpT*log(1.0/tempx)/(1.0-tempx);		tempx=codF[22]*fpT/(codF[54]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[1462]=rpCT*fpT;		else			qm[1462]=rpCT*fpT*log(1.0/tempx)/(1.0-tempx);		tempx=codF[23]*fpT/(codF[55]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[1527]=rpCT*fpT;		else			qm[1527]=rpCT*fpT*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[1332]=qm[1397]=qm[1462]=qm[1527]=0.0;		}	if(param[SSRFCodon::fT]->val>0.0)		{		tempx=codF[20]*fpA/(codF[4]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[1284]=rpAC*fpA;		else			qm[1284]=rpAC*fpA*log(1.0/tempx)/(1.0-tempx);		tempx=codF[21]*fpA/(codF[5]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[1349]=rpAC*fpA;		else			qm[1349]=rpAC*fpA*log(1.0/tempx)/(1.0-tempx);		tempx=codF[22]*fpA/(codF[6]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[1414]=rpAC*fpA;		else			qm[1414]=rpAC*fpA*log(1.0/tempx)/(1.0-tempx);		tempx=codF[23]*fpA/(codF[7]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[1479]=rpAC*fpA;		else			qm[1479]=rpAC*fpA*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[1284]=qm[1349]=qm[1414]=qm[1479]=0.0;		}	}else	{	qm[1316]=qm[1381]=qm[1446]=qm[1511]=qm[1361]=qm[1491]=qm[1308]=qm[1373]=qm[1438]=qm[1503]=qm[1301]=qm[1302]=qm[1303]=qm[1364]=qm[1366]=qm[1367]=qm[1428]=qm[1429]=qm[1431]=qm[1492]=qm[1493]=qm[1494]=qm[1296]=qm[1426]=qm[1304]=qm[1369]=qm[1434]=qm[1499]=qm[1332]=qm[1397]=qm[1462]=qm[1527]=qm[1284]=qm[1349]=qm[1414]=qm[1479]=0.0;	}if(param[SSRFCodon::fQ]->val>0.0)	{	if(param[SSRFCodon::fE]->val>0.0)		{		tempx=codF[16]*fpG/(codF[32]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[1056]=rpCG*fpG;		else			qm[1056]=rpCG*fpG*log(1.0/tempx)/(1.0-tempx);		tempx=codF[18]*fpG/(codF[34]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[1186]=rpCG*fpG;		else			qm[1186]=rpCG*fpG*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[1056]=qm[1186]=0.0;		}	if(param[SSRFCodon::fH]->val>0.0)		{		tempx=codF[16]*fpC/(codF[17]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[1041]=rpAC*fpC;		else			qm[1041]=rpAC*fpC*log(1.0/tempx)/(1.0-tempx);		tempx=codF[16]*fpT/(codF[19]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[1043]=rpAT*fpT;		else			qm[1043]=rpAT*fpT*log(1.0/tempx)/(1.0-tempx);		tempx=codF[18]*fpC/(codF[17]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[1169]=rpCG*fpC;		else			qm[1169]=rpCG*fpC*log(1.0/tempx)/(1.0-tempx);		tempx=codF[18]*fpT/(codF[19]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[1171]=rpGT*fpT;		else			qm[1171]=rpGT*fpT*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[1041]=qm[1043]=qm[1169]=qm[1171]=0.0;		}	if(param[SSRFCodon::fK]->val>0.0)		{		tempx=codF[16]*fpA/(codF[0]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[1024]=rpAC*fpA;		else			qm[1024]=rpAC*fpA*log(1.0/tempx)/(1.0-tempx);		tempx=codF[18]*fpA/(codF[2]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[1154]=rpAC*fpA;		else			qm[1154]=rpAC*fpA*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[1024]=qm[1154]=0.0;		}	if(param[SSRFCodon::fL]->val>0.0)		{		tempx=codF[16]*fpT/(codF[28]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[1052]=rpAT*fpT;		else			qm[1052]=rpAT*fpT*log(1.0/tempx)/(1.0-tempx);		tempx=codF[18]*fpT/(codF[30]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[1182]=rpAT*fpT;		else			qm[1182]=rpAT*fpT*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[1052]=qm[1182]=0.0;		}	if(param[SSRFCodon::fP]->val>0.0)		{		tempx=codF[16]*fpC/(codF[20]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[1044]=rpAC*fpC;		else			qm[1044]=rpAC*fpC*log(1.0/tempx)/(1.0-tempx);		tempx=codF[18]*fpC/(codF[22]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[1174]=rpAC*fpC;		else			qm[1174]=rpAC*fpC*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[1044]=qm[1174]=0.0;		}	qm[1042]=rpAG*fpG;	qm[1168]=rpAG*fpA;	if(param[SSRFCodon::fR]->val>0.0)		{		tempx=codF[16]*fpG/(codF[24]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[1048]=rpAG*fpG;		else			qm[1048]=rpAG*fpG*log(1.0/tempx)/(1.0-tempx);		tempx=codF[18]*fpG/(codF[26]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[1178]=rpAG*fpG;		else			qm[1178]=rpAG*fpG*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[1048]=qm[1178]=0.0;		}	if(param[SSRFCodon::fStop]->val>0.0)		{		tempx=codF[16]*fpT/(codF[48]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[1072]=rpCT*fpT;		else			qm[1072]=rpCT*fpT*log(1.0/tempx)/(1.0-tempx);		tempx=codF[18]*fpT/(codF[50]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[1202]=rpCT*fpT;		else			qm[1202]=rpCT*fpT*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[1072]=qm[1202]=0.0;		}	}else	{	qm[1056]=qm[1186]=qm[1041]=qm[1043]=qm[1169]=qm[1171]=qm[1024]=qm[1154]=qm[1052]=qm[1182]=qm[1044]=qm[1174]=qm[1042]=qm[1168]=qm[1048]=qm[1178]=qm[1072]=qm[1202]=0.0;	}if(param[SSRFCodon::fR]->val>0.0)	{	if(param[SSRFCodon::fC]->val>0.0)		{		tempx=codF[25]*fpT/(codF[57]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[1657]=rpCT*fpT;		else			qm[1657]=rpCT*fpT*log(1.0/tempx)/(1.0-tempx);		tempx=codF[27]*fpT/(codF[59]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[1787]=rpCT*fpT;		else			qm[1787]=rpCT*fpT*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[1657]=qm[1787]=0.0;		}	if(param[SSRFCodon::fG]->val>0.0)		{		tempx=codF[24]*fpG/(codF[40]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[1576]=rpCG*fpG;		else			qm[1576]=rpCG*fpG*log(1.0/tempx)/(1.0-tempx);		tempx=codF[25]*fpG/(codF[41]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[1641]=rpCG*fpG;		else			qm[1641]=rpCG*fpG*log(1.0/tempx)/(1.0-tempx);		tempx=codF[26]*fpG/(codF[42]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[1706]=rpCG*fpG;		else			qm[1706]=rpCG*fpG*log(1.0/tempx)/(1.0-tempx);		tempx=codF[27]*fpG/(codF[43]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[1771]=rpCG*fpG;		else			qm[1771]=rpCG*fpG*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[1576]=qm[1641]=qm[1706]=qm[1771]=0.0;		}	if(param[SSRFCodon::fH]->val>0.0)		{		tempx=codF[25]*fpA/(codF[17]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[1617]=rpAG*fpA;		else			qm[1617]=rpAG*fpA*log(1.0/tempx)/(1.0-tempx);		tempx=codF[27]*fpA/(codF[19]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[1747]=rpAG*fpA;		else			qm[1747]=rpAG*fpA*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[1617]=qm[1747]=0.0;		}	if(param[SSRFCodon::fL]->val>0.0)		{		tempx=codF[24]*fpT/(codF[28]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[1564]=rpGT*fpT;		else			qm[1564]=rpGT*fpT*log(1.0/tempx)/(1.0-tempx);		tempx=codF[25]*fpT/(codF[29]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[1629]=rpGT*fpT;		else			qm[1629]=rpGT*fpT*log(1.0/tempx)/(1.0-tempx);		tempx=codF[26]*fpT/(codF[30]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[1694]=rpGT*fpT;		else			qm[1694]=rpGT*fpT*log(1.0/tempx)/(1.0-tempx);		tempx=codF[27]*fpT/(codF[31]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[1759]=rpGT*fpT;		else			qm[1759]=rpGT*fpT*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[1564]=qm[1629]=qm[1694]=qm[1759]=0.0;		}	if(param[SSRFCodon::fP]->val>0.0)		{		tempx=codF[24]*fpC/(codF[20]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[1556]=rpCG*fpC;		else			qm[1556]=rpCG*fpC*log(1.0/tempx)/(1.0-tempx);		tempx=codF[25]*fpC/(codF[21]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[1621]=rpCG*fpC;		else			qm[1621]=rpCG*fpC*log(1.0/tempx)/(1.0-tempx);		tempx=codF[26]*fpC/(codF[22]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[1686]=rpCG*fpC;		else			qm[1686]=rpCG*fpC*log(1.0/tempx)/(1.0-tempx);		tempx=codF[27]*fpC/(codF[23]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[1751]=rpCG*fpC;		else			qm[1751]=rpCG*fpC*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[1556]=qm[1621]=qm[1686]=qm[1751]=0.0;		}	if(param[SSRFCodon::fQ]->val>0.0)		{		tempx=codF[24]*fpA/(codF[16]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[1552]=rpAG*fpA;		else			qm[1552]=rpAG*fpA*log(1.0/tempx)/(1.0-tempx);		tempx=codF[26]*fpA/(codF[18]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[1682]=rpAG*fpA;		else			qm[1682]=rpAG*fpA*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[1552]=qm[1682]=0.0;		}	qm[1561]=rpAC*fpC;	qm[1562]=rpAG*fpG;	qm[1563]=rpAT*fpT;	qm[1624]=rpAC*fpA;	qm[1626]=rpCG*fpG;	qm[1627]=rpCT*fpT;	qm[1688]=rpAG*fpA;	qm[1689]=rpCG*fpC;	qm[1691]=rpGT*fpT;	qm[1752]=rpAT*fpA;	qm[1753]=rpCT*fpC;	qm[1754]=rpGT*fpG;	if(param[SSRFCodon::fS]->val>0.0)		{		tempx=codF[25]*fpA/(codF[9]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[1609]=rpAC*fpA;		else			qm[1609]=rpAC*fpA*log(1.0/tempx)/(1.0-tempx);		tempx=codF[27]*fpA/(codF[11]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[1739]=rpAC*fpA;		else			qm[1739]=rpAC*fpA*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[1609]=qm[1739]=0.0;		}	if(param[SSRFCodon::fW]->val>0.0)		{		tempx=codF[24]*fpT/(codF[56]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[1592]=rpCT*fpT;		else			qm[1592]=rpCT*fpT*log(1.0/tempx)/(1.0-tempx);		tempx=codF[26]*fpT/(codF[58]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[1722]=rpCT*fpT;		else			qm[1722]=rpCT*fpT*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[1592]=qm[1722]=0.0;		}	if(param[SSRFCodon::fStop]->val>0.0)		{		tempx=codF[24]*fpA/(codF[8]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[1544]=rpAC*fpA;		else			qm[1544]=rpAC*fpA*log(1.0/tempx)/(1.0-tempx);		tempx=codF[26]*fpA/(codF[10]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[1674]=rpAC*fpA;		else			qm[1674]=rpAC*fpA*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[1544]=qm[1674]=0.0;		}	}else	{	qm[1657]=qm[1787]=qm[1576]=qm[1641]=qm[1706]=qm[1771]=qm[1617]=qm[1747]=qm[1564]=qm[1629]=qm[1694]=qm[1759]=qm[1556]=qm[1621]=qm[1686]=qm[1751]=qm[1552]=qm[1682]=qm[1561]=qm[1562]=qm[1563]=qm[1624]=qm[1626]=qm[1627]=qm[1688]=qm[1689]=qm[1691]=qm[1752]=qm[1753]=qm[1754]=qm[1609]=qm[1739]=qm[1592]=qm[1722]=qm[1544]=qm[1674]=0.0;	}if(param[SSRFCodon::fS]->val>0.0)	{	if(param[SSRFCodon::fA]->val>0.0)		{		tempx=codF[52]*fpG/(codF[36]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3364]=rpGT*fpG;		else			qm[3364]=rpGT*fpG*log(1.0/tempx)/(1.0-tempx);		tempx=codF[53]*fpG/(codF[37]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3429]=rpGT*fpG;		else			qm[3429]=rpGT*fpG*log(1.0/tempx)/(1.0-tempx);		tempx=codF[54]*fpG/(codF[38]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3494]=rpGT*fpG;		else			qm[3494]=rpGT*fpG*log(1.0/tempx)/(1.0-tempx);		tempx=codF[55]*fpG/(codF[39]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3559]=rpGT*fpG;		else			qm[3559]=rpGT*fpG*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[3364]=qm[3429]=qm[3494]=qm[3559]=0.0;		}	if(param[SSRFCodon::fC]->val>0.0)		{		tempx=codF[9]*fpT/(codF[57]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[633]=rpAT*fpT;		else			qm[633]=rpAT*fpT*log(1.0/tempx)/(1.0-tempx);		tempx=codF[11]*fpT/(codF[59]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[763]=rpAT*fpT;		else			qm[763]=rpAT*fpT*log(1.0/tempx)/(1.0-tempx);		tempx=codF[53]*fpG/(codF[57]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3449]=rpCG*fpG;		else			qm[3449]=rpCG*fpG*log(1.0/tempx)/(1.0-tempx);		tempx=codF[55]*fpG/(codF[59]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3579]=rpCG*fpG;		else			qm[3579]=rpCG*fpG*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[633]=qm[763]=qm[3449]=qm[3579]=0.0;		}	if(param[SSRFCodon::fF]->val>0.0)		{		tempx=codF[53]*fpT/(codF[61]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3453]=rpCT*fpT;		else			qm[3453]=rpCT*fpT*log(1.0/tempx)/(1.0-tempx);		tempx=codF[55]*fpT/(codF[63]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3583]=rpCT*fpT;		else			qm[3583]=rpCT*fpT*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[3453]=qm[3583]=0.0;		}	if(param[SSRFCodon::fG]->val>0.0)		{		tempx=codF[9]*fpG/(codF[41]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[617]=rpAG*fpG;		else			qm[617]=rpAG*fpG*log(1.0/tempx)/(1.0-tempx);		tempx=codF[11]*fpG/(codF[43]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[747]=rpAG*fpG;		else			qm[747]=rpAG*fpG*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[617]=qm[747]=0.0;		}	if(param[SSRFCodon::fI]->val>0.0)		{		tempx=codF[9]*fpT/(codF[13]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[589]=rpGT*fpT;		else			qm[589]=rpGT*fpT*log(1.0/tempx)/(1.0-tempx);		tempx=codF[11]*fpT/(codF[15]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[719]=rpGT*fpT;		else			qm[719]=rpGT*fpT*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[589]=qm[719]=0.0;		}	if(param[SSRFCodon::fL]->val>0.0)		{		tempx=codF[52]*fpT/(codF[60]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3388]=rpCT*fpT;		else			qm[3388]=rpCT*fpT*log(1.0/tempx)/(1.0-tempx);		tempx=codF[54]*fpT/(codF[62]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3518]=rpCT*fpT;		else			qm[3518]=rpCT*fpT*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[3388]=qm[3518]=0.0;		}	if(param[SSRFCodon::fN]->val>0.0)		{		tempx=codF[9]*fpA/(codF[1]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[577]=rpAG*fpA;		else			qm[577]=rpAG*fpA*log(1.0/tempx)/(1.0-tempx);		tempx=codF[11]*fpA/(codF[3]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[707]=rpAG*fpA;		else			qm[707]=rpAG*fpA*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[577]=qm[707]=0.0;		}	if(param[SSRFCodon::fP]->val>0.0)		{		tempx=codF[52]*fpC/(codF[20]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3348]=rpCT*fpC;		else			qm[3348]=rpCT*fpC*log(1.0/tempx)/(1.0-tempx);		tempx=codF[53]*fpC/(codF[21]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3413]=rpCT*fpC;		else			qm[3413]=rpCT*fpC*log(1.0/tempx)/(1.0-tempx);		tempx=codF[54]*fpC/(codF[22]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3478]=rpCT*fpC;		else			qm[3478]=rpCT*fpC*log(1.0/tempx)/(1.0-tempx);		tempx=codF[55]*fpC/(codF[23]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3543]=rpCT*fpC;		else			qm[3543]=rpCT*fpC*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[3348]=qm[3413]=qm[3478]=qm[3543]=0.0;		}	if(param[SSRFCodon::fR]->val>0.0)		{		tempx=codF[9]*fpC/(codF[25]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[601]=rpAC*fpC;		else			qm[601]=rpAC*fpC*log(1.0/tempx)/(1.0-tempx);		tempx=codF[11]*fpC/(codF[27]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[731]=rpAC*fpC;		else			qm[731]=rpAC*fpC*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[601]=qm[731]=0.0;		}	qm[587]=rpCT*fpT;	qm[713]=rpCT*fpC;	qm[3381]=rpAC*fpC;	qm[3382]=rpAG*fpG;	qm[3383]=rpAT*fpT;	qm[3444]=rpAC*fpA;	qm[3446]=rpCG*fpG;	qm[3447]=rpCT*fpT;	qm[3508]=rpAG*fpA;	qm[3509]=rpCG*fpC;	qm[3511]=rpGT*fpT;	qm[3572]=rpAT*fpA;	qm[3573]=rpCT*fpC;	qm[3574]=rpGT*fpG;	if(param[SSRFCodon::fT]->val>0.0)		{		tempx=codF[9]*fpC/(codF[5]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[581]=rpCG*fpC;		else			qm[581]=rpCG*fpC*log(1.0/tempx)/(1.0-tempx);		tempx=codF[11]*fpC/(codF[7]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[711]=rpCG*fpC;		else			qm[711]=rpCG*fpC*log(1.0/tempx)/(1.0-tempx);		tempx=codF[52]*fpA/(codF[4]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3332]=rpAT*fpA;		else			qm[3332]=rpAT*fpA*log(1.0/tempx)/(1.0-tempx);		tempx=codF[53]*fpA/(codF[5]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3397]=rpAT*fpA;		else			qm[3397]=rpAT*fpA*log(1.0/tempx)/(1.0-tempx);		tempx=codF[54]*fpA/(codF[6]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3462]=rpAT*fpA;		else			qm[3462]=rpAT*fpA*log(1.0/tempx)/(1.0-tempx);		tempx=codF[55]*fpA/(codF[7]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3527]=rpAT*fpA;		else			qm[3527]=rpAT*fpA*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[581]=qm[711]=qm[3332]=qm[3397]=qm[3462]=qm[3527]=0.0;		}	if(param[SSRFCodon::fW]->val>0.0)		{		tempx=codF[52]*fpG/(codF[56]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3384]=rpCG*fpG;		else			qm[3384]=rpCG*fpG*log(1.0/tempx)/(1.0-tempx);		tempx=codF[54]*fpG/(codF[58]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3514]=rpCG*fpG;		else			qm[3514]=rpCG*fpG*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[3384]=qm[3514]=0.0;		}	if(param[SSRFCodon::fY]->val>0.0)		{		tempx=codF[53]*fpA/(codF[49]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3441]=rpAC*fpA;		else			qm[3441]=rpAC*fpA*log(1.0/tempx)/(1.0-tempx);		tempx=codF[55]*fpA/(codF[51]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3571]=rpAC*fpA;		else			qm[3571]=rpAC*fpA*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[3441]=qm[3571]=0.0;		}	if(param[SSRFCodon::fStop]->val>0.0)		{		tempx=codF[9]*fpA/(codF[8]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[584]=rpAC*fpA;		else			qm[584]=rpAC*fpA*log(1.0/tempx)/(1.0-tempx);		tempx=codF[9]*fpG/(codF[10]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[586]=rpCG*fpG;		else			qm[586]=rpCG*fpG*log(1.0/tempx)/(1.0-tempx);		tempx=codF[11]*fpA/(codF[8]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[712]=rpAT*fpA;		else			qm[712]=rpAT*fpA*log(1.0/tempx)/(1.0-tempx);		tempx=codF[11]*fpG/(codF[10]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[714]=rpGT*fpG;		else			qm[714]=rpGT*fpG*log(1.0/tempx)/(1.0-tempx);		tempx=codF[52]*fpA/(codF[48]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3376]=rpAC*fpA;		else			qm[3376]=rpAC*fpA*log(1.0/tempx)/(1.0-tempx);		tempx=codF[54]*fpA/(codF[50]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3506]=rpAC*fpA;		else			qm[3506]=rpAC*fpA*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[584]=qm[586]=qm[712]=qm[714]=qm[3376]=qm[3506]=0.0;		}	}else	{	qm[3364]=qm[3429]=qm[3494]=qm[3559]=qm[633]=qm[763]=qm[3449]=qm[3579]=qm[3453]=qm[3583]=qm[617]=qm[747]=qm[589]=qm[719]=qm[3388]=qm[3518]=qm[577]=qm[707]=qm[3348]=qm[3413]=qm[3478]=qm[3543]=qm[601]=qm[731]=qm[587]=qm[713]=qm[3381]=qm[3382]=qm[3383]=qm[3444]=qm[3446]=qm[3447]=qm[3508]=qm[3509]=qm[3511]=qm[3572]=qm[3573]=qm[3574]=qm[581]=qm[711]=qm[3332]=qm[3397]=qm[3462]=qm[3527]=qm[3384]=qm[3514]=qm[3441]=qm[3571]=qm[584]=qm[586]=qm[712]=qm[714]=qm[3376]=qm[3506]=0.0;	}if(param[SSRFCodon::fT]->val>0.0)	{	if(param[SSRFCodon::fA]->val>0.0)		{		tempx=codF[4]*fpG/(codF[36]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[292]=rpAG*fpG;		else			qm[292]=rpAG*fpG*log(1.0/tempx)/(1.0-tempx);		tempx=codF[5]*fpG/(codF[37]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[357]=rpAG*fpG;		else			qm[357]=rpAG*fpG*log(1.0/tempx)/(1.0-tempx);		tempx=codF[6]*fpG/(codF[38]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[422]=rpAG*fpG;		else			qm[422]=rpAG*fpG*log(1.0/tempx)/(1.0-tempx);		tempx=codF[7]*fpG/(codF[39]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[487]=rpAG*fpG;		else			qm[487]=rpAG*fpG*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[292]=qm[357]=qm[422]=qm[487]=0.0;		}	if(param[SSRFCodon::fI]->val>0.0)		{		tempx=codF[5]*fpT/(codF[13]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[333]=rpCT*fpT;		else			qm[333]=rpCT*fpT*log(1.0/tempx)/(1.0-tempx);		tempx=codF[7]*fpT/(codF[15]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[463]=rpCT*fpT;		else			qm[463]=rpCT*fpT*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[333]=qm[463]=0.0;		}	if(param[SSRFCodon::fK]->val>0.0)		{		tempx=codF[4]*fpA/(codF[0]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[256]=rpAC*fpA;		else			qm[256]=rpAC*fpA*log(1.0/tempx)/(1.0-tempx);		tempx=codF[6]*fpA/(codF[2]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[386]=rpAC*fpA;		else			qm[386]=rpAC*fpA*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[256]=qm[386]=0.0;		}	if(param[SSRFCodon::fM]->val>0.0)		{		tempx=codF[4]*fpT/(codF[12]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[268]=rpCT*fpT;		else			qm[268]=rpCT*fpT*log(1.0/tempx)/(1.0-tempx);		tempx=codF[6]*fpT/(codF[14]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[398]=rpCT*fpT;		else			qm[398]=rpCT*fpT*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[268]=qm[398]=0.0;		}	if(param[SSRFCodon::fN]->val>0.0)		{		tempx=codF[5]*fpA/(codF[1]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[321]=rpAC*fpA;		else			qm[321]=rpAC*fpA*log(1.0/tempx)/(1.0-tempx);		tempx=codF[7]*fpA/(codF[3]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[451]=rpAC*fpA;		else			qm[451]=rpAC*fpA*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[321]=qm[451]=0.0;		}	if(param[SSRFCodon::fP]->val>0.0)		{		tempx=codF[4]*fpC/(codF[20]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[276]=rpAC*fpC;		else			qm[276]=rpAC*fpC*log(1.0/tempx)/(1.0-tempx);		tempx=codF[5]*fpC/(codF[21]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[341]=rpAC*fpC;		else			qm[341]=rpAC*fpC*log(1.0/tempx)/(1.0-tempx);		tempx=codF[6]*fpC/(codF[22]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[406]=rpAC*fpC;		else			qm[406]=rpAC*fpC*log(1.0/tempx)/(1.0-tempx);		tempx=codF[7]*fpC/(codF[23]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[471]=rpAC*fpC;		else			qm[471]=rpAC*fpC*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[276]=qm[341]=qm[406]=qm[471]=0.0;		}	if(param[SSRFCodon::fS]->val>0.0)		{		tempx=codF[4]*fpT/(codF[52]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[308]=rpAT*fpT;		else			qm[308]=rpAT*fpT*log(1.0/tempx)/(1.0-tempx);		tempx=codF[5]*fpG/(codF[9]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[329]=rpCG*fpG;		else			qm[329]=rpCG*fpG*log(1.0/tempx)/(1.0-tempx);		tempx=codF[5]*fpT/(codF[53]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[373]=rpAT*fpT;		else			qm[373]=rpAT*fpT*log(1.0/tempx)/(1.0-tempx);		tempx=codF[6]*fpT/(codF[54]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[438]=rpAT*fpT;		else			qm[438]=rpAT*fpT*log(1.0/tempx)/(1.0-tempx);		tempx=codF[7]*fpG/(codF[11]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[459]=rpCG*fpG;		else			qm[459]=rpCG*fpG*log(1.0/tempx)/(1.0-tempx);		tempx=codF[7]*fpT/(codF[55]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[503]=rpAT*fpT;		else			qm[503]=rpAT*fpT*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[308]=qm[329]=qm[373]=qm[438]=qm[459]=qm[503]=0.0;		}	qm[261]=rpAC*fpC;	qm[262]=rpAG*fpG;	qm[263]=rpAT*fpT;	qm[324]=rpAC*fpA;	qm[326]=rpCG*fpG;	qm[327]=rpCT*fpT;	qm[388]=rpAG*fpA;	qm[389]=rpCG*fpC;	qm[391]=rpGT*fpT;	qm[452]=rpAT*fpA;	qm[453]=rpCT*fpC;	qm[454]=rpGT*fpG;	if(param[SSRFCodon::fStop]->val>0.0)		{		tempx=codF[4]*fpG/(codF[8]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[264]=rpCG*fpG;		else			qm[264]=rpCG*fpG*log(1.0/tempx)/(1.0-tempx);		tempx=codF[6]*fpG/(codF[10]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[394]=rpCG*fpG;		else			qm[394]=rpCG*fpG*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[264]=qm[394]=0.0;		}	}else	{	qm[292]=qm[357]=qm[422]=qm[487]=qm[333]=qm[463]=qm[256]=qm[386]=qm[268]=qm[398]=qm[321]=qm[451]=qm[276]=qm[341]=qm[406]=qm[471]=qm[308]=qm[329]=qm[373]=qm[438]=qm[459]=qm[503]=qm[261]=qm[262]=qm[263]=qm[324]=qm[326]=qm[327]=qm[388]=qm[389]=qm[391]=qm[452]=qm[453]=qm[454]=qm[264]=qm[394]=0.0;	}if(param[SSRFCodon::fV]->val>0.0)	{	if(param[SSRFCodon::fA]->val>0.0)		{		tempx=codF[44]*fpC/(codF[36]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[2852]=rpCT*fpC;		else			qm[2852]=rpCT*fpC*log(1.0/tempx)/(1.0-tempx);		tempx=codF[45]*fpC/(codF[37]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[2917]=rpCT*fpC;		else			qm[2917]=rpCT*fpC*log(1.0/tempx)/(1.0-tempx);		tempx=codF[46]*fpC/(codF[38]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[2982]=rpCT*fpC;		else			qm[2982]=rpCT*fpC*log(1.0/tempx)/(1.0-tempx);		tempx=codF[47]*fpC/(codF[39]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3047]=rpCT*fpC;		else			qm[3047]=rpCT*fpC*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[2852]=qm[2917]=qm[2982]=qm[3047]=0.0;		}	if(param[SSRFCodon::fD]->val>0.0)		{		tempx=codF[45]*fpA/(codF[33]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[2913]=rpAT*fpA;		else			qm[2913]=rpAT*fpA*log(1.0/tempx)/(1.0-tempx);		tempx=codF[47]*fpA/(codF[35]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3043]=rpAT*fpA;		else			qm[3043]=rpAT*fpA*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[2913]=qm[3043]=0.0;		}	if(param[SSRFCodon::fE]->val>0.0)		{		tempx=codF[44]*fpA/(codF[32]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[2848]=rpAT*fpA;		else			qm[2848]=rpAT*fpA*log(1.0/tempx)/(1.0-tempx);		tempx=codF[46]*fpA/(codF[34]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[2978]=rpAT*fpA;		else			qm[2978]=rpAT*fpA*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[2848]=qm[2978]=0.0;		}	if(param[SSRFCodon::fF]->val>0.0)		{		tempx=codF[45]*fpT/(codF[61]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[2941]=rpGT*fpT;		else			qm[2941]=rpGT*fpT*log(1.0/tempx)/(1.0-tempx);		tempx=codF[47]*fpT/(codF[63]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3071]=rpGT*fpT;		else			qm[3071]=rpGT*fpT*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[2941]=qm[3071]=0.0;		}	if(param[SSRFCodon::fG]->val>0.0)		{		tempx=codF[44]*fpG/(codF[40]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[2856]=rpGT*fpG;		else			qm[2856]=rpGT*fpG*log(1.0/tempx)/(1.0-tempx);		tempx=codF[45]*fpG/(codF[41]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[2921]=rpGT*fpG;		else			qm[2921]=rpGT*fpG*log(1.0/tempx)/(1.0-tempx);		tempx=codF[46]*fpG/(codF[42]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[2986]=rpGT*fpG;		else			qm[2986]=rpGT*fpG*log(1.0/tempx)/(1.0-tempx);		tempx=codF[47]*fpG/(codF[43]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3051]=rpGT*fpG;		else			qm[3051]=rpGT*fpG*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[2856]=qm[2921]=qm[2986]=qm[3051]=0.0;		}	if(param[SSRFCodon::fI]->val>0.0)		{		tempx=codF[45]*fpA/(codF[13]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[2893]=rpAG*fpA;		else			qm[2893]=rpAG*fpA*log(1.0/tempx)/(1.0-tempx);		tempx=codF[47]*fpA/(codF[15]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3023]=rpAG*fpA;		else			qm[3023]=rpAG*fpA*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[2893]=qm[3023]=0.0;		}	if(param[SSRFCodon::fL]->val>0.0)		{		tempx=codF[44]*fpC/(codF[28]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[2844]=rpCG*fpC;		else			qm[2844]=rpCG*fpC*log(1.0/tempx)/(1.0-tempx);		tempx=codF[44]*fpT/(codF[60]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[2876]=rpGT*fpT;		else			qm[2876]=rpGT*fpT*log(1.0/tempx)/(1.0-tempx);		tempx=codF[45]*fpC/(codF[29]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[2909]=rpCG*fpC;		else			qm[2909]=rpCG*fpC*log(1.0/tempx)/(1.0-tempx);		tempx=codF[46]*fpC/(codF[30]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[2974]=rpCG*fpC;		else			qm[2974]=rpCG*fpC*log(1.0/tempx)/(1.0-tempx);		tempx=codF[46]*fpT/(codF[62]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3006]=rpGT*fpT;		else			qm[3006]=rpGT*fpT*log(1.0/tempx)/(1.0-tempx);		tempx=codF[47]*fpC/(codF[31]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3039]=rpCG*fpC;		else			qm[3039]=rpCG*fpC*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[2844]=qm[2876]=qm[2909]=qm[2974]=qm[3006]=qm[3039]=0.0;		}	if(param[SSRFCodon::fM]->val>0.0)		{		tempx=codF[44]*fpA/(codF[12]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[2828]=rpAG*fpA;		else			qm[2828]=rpAG*fpA*log(1.0/tempx)/(1.0-tempx);		tempx=codF[46]*fpA/(codF[14]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[2958]=rpAG*fpA;		else			qm[2958]=rpAG*fpA*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[2828]=qm[2958]=0.0;		}	qm[2861]=rpAC*fpC;	qm[2862]=rpAG*fpG;	qm[2863]=rpAT*fpT;	qm[2924]=rpAC*fpA;	qm[2926]=rpCG*fpG;	qm[2927]=rpCT*fpT;	qm[2988]=rpAG*fpA;	qm[2989]=rpCG*fpC;	qm[2991]=rpGT*fpT;	qm[3052]=rpAT*fpA;	qm[3053]=rpCT*fpC;	qm[3054]=rpGT*fpG;	}else	{	qm[2852]=qm[2917]=qm[2982]=qm[3047]=qm[2913]=qm[3043]=qm[2848]=qm[2978]=qm[2941]=qm[3071]=qm[2856]=qm[2921]=qm[2986]=qm[3051]=qm[2893]=qm[3023]=qm[2844]=qm[2876]=qm[2909]=qm[2974]=qm[3006]=qm[3039]=qm[2828]=qm[2958]=qm[2861]=qm[2862]=qm[2863]=qm[2924]=qm[2926]=qm[2927]=qm[2988]=qm[2989]=qm[2991]=qm[3052]=qm[3053]=qm[3054]=0.0;	}if(param[SSRFCodon::fW]->val>0.0)	{	if(param[SSRFCodon::fC]->val>0.0)		{		tempx=codF[56]*fpC/(codF[57]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3641]=rpAC*fpC;		else			qm[3641]=rpAC*fpC*log(1.0/tempx)/(1.0-tempx);		tempx=codF[56]*fpT/(codF[59]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3643]=rpAT*fpT;		else			qm[3643]=rpAT*fpT*log(1.0/tempx)/(1.0-tempx);		tempx=codF[58]*fpC/(codF[57]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3769]=rpCG*fpC;		else			qm[3769]=rpCG*fpC*log(1.0/tempx)/(1.0-tempx);		tempx=codF[58]*fpT/(codF[59]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3771]=rpGT*fpT;		else			qm[3771]=rpGT*fpT*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[3641]=qm[3643]=qm[3769]=qm[3771]=0.0;		}	if(param[SSRFCodon::fG]->val>0.0)		{		tempx=codF[56]*fpG/(codF[40]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3624]=rpGT*fpG;		else			qm[3624]=rpGT*fpG*log(1.0/tempx)/(1.0-tempx);		tempx=codF[58]*fpG/(codF[42]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3754]=rpGT*fpG;		else			qm[3754]=rpGT*fpG*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[3624]=qm[3754]=0.0;		}	if(param[SSRFCodon::fL]->val>0.0)		{		tempx=codF[56]*fpT/(codF[60]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3644]=rpGT*fpT;		else			qm[3644]=rpGT*fpT*log(1.0/tempx)/(1.0-tempx);		tempx=codF[58]*fpT/(codF[62]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3774]=rpGT*fpT;		else			qm[3774]=rpGT*fpT*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[3644]=qm[3774]=0.0;		}	if(param[SSRFCodon::fR]->val>0.0)		{		tempx=codF[56]*fpC/(codF[24]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3608]=rpCT*fpC;		else			qm[3608]=rpCT*fpC*log(1.0/tempx)/(1.0-tempx);		tempx=codF[58]*fpC/(codF[26]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3738]=rpCT*fpC;		else			qm[3738]=rpCT*fpC*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[3608]=qm[3738]=0.0;		}	if(param[SSRFCodon::fS]->val>0.0)		{		tempx=codF[56]*fpC/(codF[52]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3636]=rpCG*fpC;		else			qm[3636]=rpCG*fpC*log(1.0/tempx)/(1.0-tempx);		tempx=codF[58]*fpC/(codF[54]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3766]=rpCG*fpC;		else			qm[3766]=rpCG*fpC*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[3636]=qm[3766]=0.0;		}	qm[3642]=rpAG*fpG;	qm[3768]=rpAG*fpA;	if(param[SSRFCodon::fStop]->val>0.0)		{		tempx=codF[56]*fpA/(codF[8]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3592]=rpAT*fpA;		else			qm[3592]=rpAT*fpA*log(1.0/tempx)/(1.0-tempx);		tempx=codF[56]*fpA/(codF[48]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3632]=rpAG*fpA;		else			qm[3632]=rpAG*fpA*log(1.0/tempx)/(1.0-tempx);		tempx=codF[58]*fpA/(codF[10]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3722]=rpAT*fpA;		else			qm[3722]=rpAT*fpA*log(1.0/tempx)/(1.0-tempx);		tempx=codF[58]*fpA/(codF[50]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3762]=rpAG*fpA;		else			qm[3762]=rpAG*fpA*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[3592]=qm[3632]=qm[3722]=qm[3762]=0.0;		}	}else	{	qm[3641]=qm[3643]=qm[3769]=qm[3771]=qm[3624]=qm[3754]=qm[3644]=qm[3774]=qm[3608]=qm[3738]=qm[3636]=qm[3766]=qm[3642]=qm[3768]=qm[3592]=qm[3632]=qm[3722]=qm[3762]=0.0;	}if(param[SSRFCodon::fY]->val>0.0)	{	if(param[SSRFCodon::fC]->val>0.0)		{		tempx=codF[49]*fpG/(codF[57]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3193]=rpAG*fpG;		else			qm[3193]=rpAG*fpG*log(1.0/tempx)/(1.0-tempx);		tempx=codF[51]*fpG/(codF[59]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3323]=rpAG*fpG;		else			qm[3323]=rpAG*fpG*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[3193]=qm[3323]=0.0;		}	if(param[SSRFCodon::fD]->val>0.0)		{		tempx=codF[49]*fpG/(codF[33]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3169]=rpGT*fpG;		else			qm[3169]=rpGT*fpG*log(1.0/tempx)/(1.0-tempx);		tempx=codF[51]*fpG/(codF[35]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3299]=rpGT*fpG;		else			qm[3299]=rpGT*fpG*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[3169]=qm[3299]=0.0;		}	if(param[SSRFCodon::fF]->val>0.0)		{		tempx=codF[49]*fpT/(codF[61]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3197]=rpAT*fpT;		else			qm[3197]=rpAT*fpT*log(1.0/tempx)/(1.0-tempx);		tempx=codF[51]*fpT/(codF[63]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3327]=rpAT*fpT;		else			qm[3327]=rpAT*fpT*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[3197]=qm[3327]=0.0;		}	if(param[SSRFCodon::fH]->val>0.0)		{		tempx=codF[49]*fpC/(codF[17]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3153]=rpCT*fpC;		else			qm[3153]=rpCT*fpC*log(1.0/tempx)/(1.0-tempx);		tempx=codF[51]*fpC/(codF[19]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3283]=rpCT*fpC;		else			qm[3283]=rpCT*fpC*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[3153]=qm[3283]=0.0;		}	if(param[SSRFCodon::fN]->val>0.0)		{		tempx=codF[49]*fpA/(codF[1]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3137]=rpAT*fpA;		else			qm[3137]=rpAT*fpA*log(1.0/tempx)/(1.0-tempx);		tempx=codF[51]*fpA/(codF[3]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3267]=rpAT*fpA;		else			qm[3267]=rpAT*fpA*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[3137]=qm[3267]=0.0;		}	if(param[SSRFCodon::fS]->val>0.0)		{		tempx=codF[49]*fpC/(codF[53]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3189]=rpAC*fpC;		else			qm[3189]=rpAC*fpC*log(1.0/tempx)/(1.0-tempx);		tempx=codF[51]*fpC/(codF[55]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3319]=rpAC*fpC;		else			qm[3319]=rpAC*fpC*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[3189]=qm[3319]=0.0;		}	qm[3187]=rpCT*fpT;	qm[3313]=rpCT*fpC;	if(param[SSRFCodon::fStop]->val>0.0)		{		tempx=codF[49]*fpA/(codF[48]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3184]=rpAC*fpA;		else			qm[3184]=rpAC*fpA*log(1.0/tempx)/(1.0-tempx);		tempx=codF[49]*fpG/(codF[50]*fpC);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3186]=rpCG*fpG;		else			qm[3186]=rpCG*fpG*log(1.0/tempx)/(1.0-tempx);		tempx=codF[51]*fpA/(codF[48]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3312]=rpAT*fpA;		else			qm[3312]=rpAT*fpA*log(1.0/tempx)/(1.0-tempx);		tempx=codF[51]*fpG/(codF[50]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3314]=rpGT*fpG;		else			qm[3314]=rpGT*fpG*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[3184]=qm[3186]=qm[3312]=qm[3314]=0.0;		}	}else	{	qm[3193]=qm[3323]=qm[3169]=qm[3299]=qm[3197]=qm[3327]=qm[3153]=qm[3283]=qm[3137]=qm[3267]=qm[3189]=qm[3319]=qm[3187]=qm[3313]=qm[3184]=qm[3186]=qm[3312]=qm[3314]=0.0;	}if(param[SSRFCodon::fStop]->val>0.0)	{	if(param[SSRFCodon::fE]->val>0.0)		{		tempx=codF[48]*fpG/(codF[32]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3104]=rpGT*fpG;		else			qm[3104]=rpGT*fpG*log(1.0/tempx)/(1.0-tempx);		tempx=codF[50]*fpG/(codF[34]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3234]=rpGT*fpG;		else			qm[3234]=rpGT*fpG*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[3104]=qm[3234]=0.0;		}	if(param[SSRFCodon::fG]->val>0.0)		{		tempx=codF[8]*fpG/(codF[40]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[552]=rpAG*fpG;		else			qm[552]=rpAG*fpG*log(1.0/tempx)/(1.0-tempx);		tempx=codF[10]*fpG/(codF[42]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[682]=rpAG*fpG;		else			qm[682]=rpAG*fpG*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[552]=qm[682]=0.0;		}	if(param[SSRFCodon::fK]->val>0.0)		{		tempx=codF[8]*fpA/(codF[0]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[512]=rpAG*fpA;		else			qm[512]=rpAG*fpA*log(1.0/tempx)/(1.0-tempx);		tempx=codF[10]*fpA/(codF[2]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[642]=rpAG*fpA;		else			qm[642]=rpAG*fpA*log(1.0/tempx)/(1.0-tempx);		tempx=codF[48]*fpA/(codF[0]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3072]=rpAT*fpA;		else			qm[3072]=rpAT*fpA*log(1.0/tempx)/(1.0-tempx);		tempx=codF[50]*fpA/(codF[2]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3202]=rpAT*fpA;		else			qm[3202]=rpAT*fpA*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[512]=qm[642]=qm[3072]=qm[3202]=0.0;		}	if(param[SSRFCodon::fL]->val>0.0)		{		tempx=codF[48]*fpT/(codF[60]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3132]=rpAT*fpT;		else			qm[3132]=rpAT*fpT*log(1.0/tempx)/(1.0-tempx);		tempx=codF[50]*fpT/(codF[62]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3262]=rpAT*fpT;		else			qm[3262]=rpAT*fpT*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[3132]=qm[3262]=0.0;		}	if(param[SSRFCodon::fM]->val>0.0)		{		tempx=codF[8]*fpT/(codF[12]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[524]=rpGT*fpT;		else			qm[524]=rpGT*fpT*log(1.0/tempx)/(1.0-tempx);		tempx=codF[10]*fpT/(codF[14]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[654]=rpGT*fpT;		else			qm[654]=rpGT*fpT*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[524]=qm[654]=0.0;		}	if(param[SSRFCodon::fQ]->val>0.0)		{		tempx=codF[48]*fpC/(codF[16]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3088]=rpCT*fpC;		else			qm[3088]=rpCT*fpC*log(1.0/tempx)/(1.0-tempx);		tempx=codF[50]*fpC/(codF[18]*fpT);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3218]=rpCT*fpC;		else			qm[3218]=rpCT*fpC*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[3088]=qm[3218]=0.0;		}	if(param[SSRFCodon::fR]->val>0.0)		{		tempx=codF[8]*fpC/(codF[24]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[536]=rpAC*fpC;		else			qm[536]=rpAC*fpC*log(1.0/tempx)/(1.0-tempx);		tempx=codF[10]*fpC/(codF[26]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[666]=rpAC*fpC;		else			qm[666]=rpAC*fpC*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[536]=qm[666]=0.0;		}	if(param[SSRFCodon::fS]->val>0.0)		{		tempx=codF[8]*fpC/(codF[9]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[521]=rpAC*fpC;		else			qm[521]=rpAC*fpC*log(1.0/tempx)/(1.0-tempx);		tempx=codF[8]*fpT/(codF[11]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[523]=rpAT*fpT;		else			qm[523]=rpAT*fpT*log(1.0/tempx)/(1.0-tempx);		tempx=codF[10]*fpC/(codF[9]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[649]=rpCG*fpC;		else			qm[649]=rpCG*fpC*log(1.0/tempx)/(1.0-tempx);		tempx=codF[10]*fpT/(codF[11]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[651]=rpGT*fpT;		else			qm[651]=rpGT*fpT*log(1.0/tempx)/(1.0-tempx);		tempx=codF[48]*fpC/(codF[52]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3124]=rpAC*fpC;		else			qm[3124]=rpAC*fpC*log(1.0/tempx)/(1.0-tempx);		tempx=codF[50]*fpC/(codF[54]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3254]=rpAC*fpC;		else			qm[3254]=rpAC*fpC*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[521]=qm[523]=qm[649]=qm[651]=qm[3124]=qm[3254]=0.0;		}	if(param[SSRFCodon::fT]->val>0.0)		{		tempx=codF[8]*fpC/(codF[4]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[516]=rpCG*fpC;		else			qm[516]=rpCG*fpC*log(1.0/tempx)/(1.0-tempx);		tempx=codF[10]*fpC/(codF[6]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[646]=rpCG*fpC;		else			qm[646]=rpCG*fpC*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[516]=qm[646]=0.0;		}	if(param[SSRFCodon::fW]->val>0.0)		{		tempx=codF[8]*fpT/(codF[56]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[568]=rpAT*fpT;		else			qm[568]=rpAT*fpT*log(1.0/tempx)/(1.0-tempx);		tempx=codF[10]*fpT/(codF[58]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[698]=rpAT*fpT;		else			qm[698]=rpAT*fpT*log(1.0/tempx)/(1.0-tempx);		tempx=codF[48]*fpG/(codF[56]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3128]=rpAG*fpG;		else			qm[3128]=rpAG*fpG*log(1.0/tempx)/(1.0-tempx);		tempx=codF[50]*fpG/(codF[58]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3258]=rpAG*fpG;		else			qm[3258]=rpAG*fpG*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[568]=qm[698]=qm[3128]=qm[3258]=0.0;		}	if(param[SSRFCodon::fY]->val>0.0)		{		tempx=codF[48]*fpC/(codF[49]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3121]=rpAC*fpC;		else			qm[3121]=rpAC*fpC*log(1.0/tempx)/(1.0-tempx);		tempx=codF[48]*fpT/(codF[51]*fpA);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3123]=rpAT*fpT;		else			qm[3123]=rpAT*fpT*log(1.0/tempx)/(1.0-tempx);		tempx=codF[50]*fpC/(codF[49]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3249]=rpCG*fpC;		else			qm[3249]=rpCG*fpC*log(1.0/tempx)/(1.0-tempx);		tempx=codF[50]*fpT/(codF[51]*fpG);		if(fabs(tempx-1.0)<SMALLDOUBLE)			qm[3251]=rpGT*fpT;		else			qm[3251]=rpGT*fpT*log(1.0/tempx)/(1.0-tempx);		}	else		{		qm[3121]=qm[3123]=qm[3249]=qm[3251]=0.0;		}	qm[522]=rpAG*fpG;	qm[648]=rpAG*fpA;	qm[3122]=rpAG*fpG;	qm[3248]=rpAG*fpA;	}else	{	qm[3104]=qm[3234]=qm[552]=qm[682]=qm[512]=qm[642]=qm[3072]=qm[3202]=qm[3132]=qm[3262]=qm[524]=qm[654]=qm[3088]=qm[3218]=qm[536]=qm[666]=qm[521]=qm[523]=qm[649]=qm[651]=qm[3124]=qm[3254]=qm[516]=qm[646]=qm[568]=qm[698]=qm[3128]=qm[3258]=qm[3121]=qm[3123]=qm[3249]=qm[3251]=qm[522]=qm[648]=qm[3122]=qm[3248]=0.0;	} 	SSRkContrib=CalculateBeta(); 	sharedBrLenInterpreter->val+=SSRkContrib/nCodonsInProtein;//add in the contribution of the new qmatrix to mean rate of change*/	}void SSRFCodon::InitializeParameters(){	RateManager::InitializeParameters();	for(int i=0;i<nparams;i++)		{if(param[i]->StartWithCurrent()) ;		else	if(param[i]->StartWithRandom())					throw IncompleteModel("Random Function to initialize parameters isn't available yet");				//param[i]->val=SomeRandomNumberFunction();		else	if(param[i]->StartWithApproximation())					throw IncompleteModel("Initial approximation of parameters isn't available yet");		else	if(param[i]->StartWithDefault())					param[i]->SetToDefault();		else	throw BadSettings("No starting value of a parameter has been defined");		}}/*void SSRFCodon::PrintPAUPLsetCommand(){	}void SSRFCodon::PrintBullLsettingsCommand(){	}*/void CreateSetOfSSRFCodons(int nm,double *gtrp/* at least 8 doubles long */,double **setofSSRFparams/* full size=nm*21 */,Model **arrayOfMods){		/*double **vecPreAlloc,***matPreAlloc;	complex ***compPre;	vecPreAlloc=new double *[4];	matPreAlloc=new double **[3];	compPre=new complex **[2];		vecPreAlloc[0]=new double[64];	vecPreAlloc[1]=new double[262144];	vecPreAlloc[2]=new double[64];	matPreAlloc[0]=psdmatrix(64);	matPreAlloc[1]=psdmatrix(64);	compPre[0]=pscmatrix(64);	compPre[1]=pscmatrix(64);	matPreAlloc[2]=psdmatrix(64);	vecPreAlloc[3]=new double[64];	double ***pMat;	pMat=psdmatrices(64,1);*/	double *vecPreAlloc;	vecPreAlloc=new double[262144];		Parameter **param;	param=new Parameter *[SSRFCodon::rGT+2];	param[SSRFCodon::blenMult]=new PositiveParameter(1.0,par(MIN)|par(CUR),1.0);	param[SSRFCodon::freqA]=new FullParameter(gtrp[0],SMALLDOUBLE,1.0-SMALLDOUBLE,par(MIN)|par(MAX)|par(CUR),SSRFCodon::defFreqA,"freqA");	param[SSRFCodon::freqC]=new FullParameter(gtrp[1],SMALLDOUBLE,1.0-SMALLDOUBLE,par(MIN)|par(MAX)|par(CUR),SSRFCodon::defFreqC,"freqC");	param[SSRFCodon::freqG]=new FullParameter(gtrp[2],SMALLDOUBLE,1.0-SMALLDOUBLE,par(MIN)|par(MAX)|par(CUR),SSRFCodon::defFreqG,"freqG");	param[SSRFCodon::freqT]=new FullParameter(1.0-gtrp[0]-gtrp[1]-gtrp[2],SMALLDOUBLE,1.0-SMALLDOUBLE,par(MIN)|par(MAX)|par(CUR),1.0-SSRFCodon::defFreqA-SSRFCodon::defFreqC-SSRFCodon::defFreqG,"freqT");	param[SSRFCodon::rAC]=new PositiveParameter(gtrp[3],par(MIN)|par(CUR),SSRFCodon::defrAC);	param[SSRFCodon::rAG]=new PositiveParameter(gtrp[4],par(MIN)|par(CUR),SSRFCodon::defrAG);	param[SSRFCodon::rAT]=new PositiveParameter(gtrp[5],par(MIN)|par(CUR),SSRFCodon::defrAT);	param[SSRFCodon::rCG]=new PositiveParameter(gtrp[6],par(MIN)|par(CUR),SSRFCodon::defrCG);	param[SSRFCodon::rCT]=new PositiveParameter(gtrp[7],par(MIN)|par(CUR),SSRFCodon::defrCT);	param[SSRFCodon::rGT]=new PositiveParameter(1.0,par(MIN)|par(CUR),SSRFCodon::defrGT);	param[SSRFCodon::rGT+1]=new PositiveParameter(0.0,par(MIN)|par(CUR),1.0);//the branch length interpreter	FreqParamGroup *stateFreqs=new FreqParamGroup(4,(param+SSRFCodon::freqA));			for(int i=0;i<nm;i++)		//arrayOfMods[i]=new SSRFCodon(param*,stateFreqs,setofSSRFparams[i],vecPreAlloc,matPreAlloc,compPre,pMat);		if(i==-10)			{slowway=true;			arrayOfMods[i]=new SSRFCodon(param,stateFreqs,setofSSRFparams[i],vecPreAlloc,nm);			}		else			{slowway=false;			arrayOfMods[i]=new SSRFCodon(param,stateFreqs,setofSSRFparams[i],vecPreAlloc,nm);			}}/*bool CheckNotZero(double x){	if(fabs(x)>SMALLDOUBLE)		return true;	return false;}*/
#include "nexusdefs.h"#include "discretedatum.h"/** * @class      DiscreteDatum * @file       discretedatum.h * @file       discretedatum.cpp * @author     Paul O. Lewis * @copyright  Copyright © 1999. All Rights Reserved. * @variable   polymorphic [int:public] if true, additional states represent polymorphism rather than uncertainty * @variable   states [int*:public] holds information about state * @see        NexusReader * * Class for holding discrete states in a matrix.  Note that there is no way to access * the variables of this class since they are all private and there are no public * access functions.  This class is designed to be manipulated by the class DiscreteMatrix, * which is the only class that has been designated a friend of DiscreteDatum. * * <p>The variable states is NULL if there is missing data, and non-NULL for any other state. * If states is non-NULL, the first cell is used to store the number of states.  This will * be 0 if the state is the gap state, 1 if the state is unambiguous and nonpolymorphic * (and not the gap state of course), and 2 or higher if there is either polymorphism or * uncertainty.  If polymorphism or uncertainty apply, it becomes necessary to store information * about which of these two situations holds.  Thus, the last cell in the array is set to * either 1 (polymorphism) or 0 (uncertainty).  While a little complicated, this scheme has * the following benefits: * <ol> * <li> if the state is missing, the only memory allocated is for a pointer (states) * <li> if the state is unambiguous and not polymorphic, no storage is used for keeping *   track of whether polymorphism or uncertainty holds * </ol> * * <p>Supposing the gap symbol is '-', the missing data symbol is '?', and the * symbols list is "ACGT", the following table shows the status of the states * variable under several different possible data matrix entries: * <table> * <tr> <th> Matrix entry <th> states equals * <tr> <td align="center"> ?            <td align="center"> NULL * <tr> <td align="center"> -            <td align="center"> <table border=1> <tr> <td>0</td> </table> * <tr> <td align="center"> G            <td align="center"> <table border=1> <tr> <td>1</td> <td>2</td> </table> * <tr> <td align="center"> (AG)         <td align="center"> <table border=1> <tr> <td>2</td> <td>0</td> <td>2</td> <td>1</td> </table> * <tr> <td align="center"> {AG}         <td align="center"> <table border=1> <tr> <td>2</td> <td>0</td> <td>2</td> <td>0</td> </table> * </table> *//** * @constructor * * Sets states to NULL and polymorphic to 0. */DiscreteDatum::DiscreteDatum(){   states = NULL;}/** * @destructor * * Deletes memory associated with states (if any was allocated). */DiscreteDatum::~DiscreteDatum(){   if( states != NULL )      delete [] states;}
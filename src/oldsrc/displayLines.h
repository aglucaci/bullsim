//TEMPORARY FOR SHOWING TREES#ifndef DISPLAY_LINES_DOTH#define DISPLAY_LINES_DOTHclass Node;class ImproperLine{};#define SPACES_FOR_TAXNAME 20enum branchDisplay	{allNames , termNames, ParsUpPass};class vertLine{	int col,frow,lrow;	public:	vertLine (int f,int l,int c)	{									if(f>=l) 										throw ImproperLine();									col=c;frow=f;lrow=l;}	bool IsInLine(int r,int c)	{								if(c!=col || r<frow ||r>lrow)	return false;								return true;								}	bool IsTopOfLine(int r,int c)	{									if(c==col && r==frow)	return true;									return false;									}	bool IsBotOfLine(int r,int c)	{									if(c==col && r==lrow)	return true;									return false;									}};class horizLine{	int row,fcol,lcol;	Node *endNode;	public:	horizLine(int r,int f,int l, Node *e)	{											if(f>=l) 												throw ImproperLine();											row=r;fcol=f;lcol=l;endNode=e;}	bool IsInLine(int r,int c) 	{								if(r!=row || c<fcol || c>=lcol) return false;								return true;								}	int GetLength()	{return (fcol-lcol);}	Node *GetNode()	{return endNode;}	void Display(int *drow,int *dcol,int windowWidth,int displayMode=branchDisplay(allNames),int firIntArg=0,  int secIntArg=0);};#endif
#ifndef CHARENCODING#define CHARENCODING#include "MTHException.h"#include "nxsstring.h"class UnknownEncoding :public MTHException {public: UnknownEncoding(const char *p) : MTHException(p) {}};enum EncodingType {DNANoGap=0 , MitoCodons=1 , AminoAcid=2 , SubModMitoCodons,SubModNucCodons};bool LessPackable(int i,int j);bool CanTreatGapsAsFifthBase(int i);int NumColumnsPerCharacter(int i);int NumShortsPerCharacter(int i);int NumStates(int i);int NumStatesInLastShort(int i);void EncodeCodon(short *dest,short *raw,bool keepGap);int DecodeACodonInOneInt(short *inp);short EncodeDNAChar(short c,bool keepGap=false);char GetNameOfIthDNAState(int c);nxsstring DecodeDNACharAsStr(short c,bool keepGap/*=false*/);int DecodeDNACharInOneChar(short c,bool keepGap/*=false*/);void EncodeProteinChar(short *dest,short c,bool keepGap=false);char GetNameOfIthProteinState(int i);nxsstring DecodeProteinCharAsStr(short *c,bool keepGap/*=false*/);int DecodeProteinCharInOneChar(short *c,bool keepGap/*=false*/);nxsstring DecodeState(short *state,int typeofEncoding);bool IsGap(short *,int typeOfEncoding);void CopyArray(short *dest,short *raw,int lengthofArray);// used to be void CopyAndEncode(int typeOfEncoding,short *dest,short *raw,int sizeofRaw);void EncodeACharacter(short *dest,short inp,int datatype,bool keepGap=false);void EncodeACharacter(short *dest,short *inp,int datatype,bool keepGap=false);char GetNameOfIthState(int i,int datatype, bool * isChar);#endif